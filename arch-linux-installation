#!/bin/bash

# Installation script for Arch Linux system.

# TODO: Check return values (https://google.github.io/styleguide/shellguide.html#s8.1-checking-return-values)!

if [[ "${UID}" != 0 ]]; then
  exit 1
fi

readonly PROCESS_ID="$$"
trap "exit 1" SIGUSR1

readonly TITLE="Arch Linux"
readonly DEFAULT_HEIGHT=8
readonly DEFAULT_WIDTH=74

if [[ -d /sys/firmware/efi/efivars/ ]]; then
  readonly boot_mode="uefi"
else
  readonly boot_mode="bios"
fi

buffer=()
while IFS= read -r disk; do
  if lsblk -n -o MOUNTPOINT "${disk}" | awk 'length($1) != 0 { exit 1 }'; then
    buffer+=("${disk}")
    if (( "${#buffer[@]}" > 2 )); then
      buffer+=("OFF")
    else
      buffer+=("ON")
    fi
  fi
done < <(lsblk -n -o TYPE,PATH | awk '$1 == "disk" { print $2 }' | sort)
if (( "${#buffer[@]}" == 0 )); then
  whiptail --title "${TITLE}" --msgbox "No installation disk" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi
size="$(( "${#buffer[@]}" / 2 ))"
readonly disk="$(whiptail --title "${TITLE}" --radiolist --noitem "Installation disk" "$(( "${size}" + 7 ))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

buffer=()
while IFS= read -r interface; do
  unset name
  case "${interface}" in
    e*)
      # Use predictable network interface name for ethernet interfaces
      if [[ -e "/sys/class/net/${interface}" ]]; then
        unset ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
        source <(udevadm info --query=property --export "/sys/class/net/${interface}")
        for variable in ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC; do
          if [[ -n "${!variable:+substitution}" ]]; then
            name="${!variable}"
            break
          fi
        done
      fi
      ;;
    w*)
      name="${interface}"
      ;;
  esac
  if [[ -n "${name:+substitution}" ]]; then
    buffer+=("${name}")
    if (( "${#buffer[@]}" > 2 )); then
      buffer+=("OFF")
    else
      buffer+=("ON")
    fi
  fi
done < <(ip -brief link show | awk '{ print $1 }' | sort)
if (( "${#buffer[@]}" == 0 )); then
  whiptail --title "${TITLE}" --msgbox "No network interface" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi
size="$(( "${#buffer[@]}" / 2 ))"
readonly interface="$(whiptail --title "${TITLE}" --radiolist --noitem "Network interface" "$(( "${size}" + 7 ))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

unset hostname
while true; do
  hostname="$(whiptail --title "${TITLE}" --inputbox "Hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "${hostname}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
  if [[ ! "${hostname}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
    whiptail --title "${TITLE}" --msgbox "Invalid hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  else
    break
  fi
done
readonly hostname

unset user
while true; do
  user="$(whiptail --title "${TITLE}" --inputbox "Username" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "${user}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
  if [[ ! "${user}" =~ ^[a-z0-9_-]{1,30}$ ]]; then
    whiptail --title "${TITLE}" --msgbox "Invalid user" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  else
    break
  fi
done
readonly user

unset user_password
while true; do
  user_password="$(whiptail --title "${TITLE}" --passwordbox "User password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
  if [[ ! "${user_password}" =~ ^.{8,}$ ]]; then
    whiptail --title "${TITLE}" --msgbox "Minimum password length is 8 characters" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  else
    break
  fi
done
readonly user_password

unset disk_encryption_password
if whiptail --title "${TITLE}" --yesno "Use password for disk encryption?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3; then
  disk_encryption_password="${user_password}"
else
  while true; do
    disk_encryption_password="$(whiptail --title "${TITLE}" --passwordbox "Disk Encryption Password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
    if [[ ! "${disk_encryption_password}" =~ ^.{8,}$ ]]; then
      whiptail --title "${TITLE}" --msgbox "Minimum password length is 8 characters" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
    else
      break
    fi
  done
fi
readonly disk_encryption_password

tz="Europe/Berlin"
while true; do
  tz="$(whiptail --title "${TITLE}" --inputbox "Time zone" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "${tz}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
  if ! awk --assign "tz=${tz}" 'BEGIN { m = 0 }; $0 == tz { m = 1 }; END { exit !m }' <<< "$(timedatectl list-timezones)"; then
    whiptail --title "${TITLE}" --msgbox "Time zone unavailable" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  else
    break
  fi
done
readonly tz

buffer=(
  "us" "English (ANSI)" "ON"
  "de" "German (ISO)" "OFF"
)
size="$(( "${#buffer[@]}" / 3 ))"
readonly keymap="$(whiptail --title "${TITLE}" --radiolist --notags "Keyboard layout" "$(( "${size}" + 7 ))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

if whiptail --title "${TITLE}" --yesno "Enable SSH daemon?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3; then
  readonly selection_enable_sshd="yes"
else
  readonly selection_enable_sshd="no"
fi

if [[ "${boot_mode}" == "uefi" ]]; then
  if whiptail --title "${TITLE}" --yesno "Use unified kernel image as default EFI image?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3; then
    readonly selection_default_efi="yes"
  else
    readonly selection_default_efi="no"
  fi
fi

if [[ "${boot_mode}" == "uefi" ]]; then
  if [[ "${selection_default_efi}" == "yes" ]]; then
    readonly default_option="--defaultno"
  fi
  if whiptail --title "${TITLE}" --yesno "Add EFI image to boot manager?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "${default_option}" 3>&1 1>&2 2>&3; then
    readonly selection_boot_entry="yes"
  else
    readonly selection_boot_entry="no"
  fi
fi

if whiptail --title "${TITLE}" --yesno "Enable logging?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" --defaultno 3>&1 1>&2 2>&3; then
  exec &> >(tee --append "${BASH_SOURCE[0]}.log")
fi

set -x

if [[ "${disk}" == *nvm* ]]; then
  readonly boot_partition="${disk}p1"
  readonly system_partition="${disk}p2"
else
  readonly boot_partition="${disk}1"
  readonly system_partition="${disk}2"
fi

if [[ "${boot_mode}" == "uefi" ]]; then
  parted --script "${disk}" mklabel gpt || exit 1
  parted --script "${disk}" mkpart EFI 4MiB 516MiB
  parted --script "${disk}" mkpart LINUX 516MiB 100%
  parted --script "${disk}" set 1 esp on
  partprobe "${disk}"
  mkfs.fat -F32 "${boot_partition}"
else
  parted --script "${disk}" mklabel msdos || exit 1
  parted --script "${disk}" mkpart primary 4MiB 516MiB
  parted --script "${disk}" mkpart primary 516MiB 100%
  parted --script "${disk}" set 1 boot on
  partprobe "${disk}"
  mkfs.ext4 "${boot_partition}"
fi
cryptsetup --batch-mode luksFormat "${system_partition}" <<- EOF
	${disk_encryption_password}
	${disk_encryption_password}
EOF
readonly crypt_partition_id="$(uuidgen)"
cryptsetup open "${system_partition}" "${crypt_partition_id}" <<- EOF
	${disk_encryption_password}
EOF
readonly virtual_block_device="/dev/mapper/${crypt_partition_id}"
mkfs.ext4 "${virtual_block_device}"
mount "${virtual_block_device}" /mnt
if [[ "${boot_mode}" == "uefi" ]]; then
  mkdir --parents /mnt/efi/
  mount --options umask=0077 "${boot_partition}" /mnt/efi
else
  mkdir --parents /mnt/boot/
  mount "${boot_partition}" /mnt/boot
fi

function unmount_filesystems() {
  umount --force --recursive --verbose /mnt
  cryptsetup close "${crypt_partition_id}"
}
trap unmount_filesystems EXIT

readonly reflector_options=(
  "--completion-percent" "100.0"
  "--country" "DE,US"
  "--delay" "0.5"
  "--latest" "20"
  "--number" "10"
  "--protocol" "https"
  "--save" "/etc/pacman.d/mirrorlist"
  "--sort" "rate"
  "--url" "https://archlinux.org/mirrors/status/tier/1/json/"
)
reflector "${reflector_options[@]}"
pacman --sync --refresh --refresh --noconfirm archlinux-keyring

readonly packages=(
  base
  base-devel
  linux
  linux-firmware
  mkinitcpio
  nftables
  iptables-nft
  sudo
  vim
  bash
  bash-completion
  python
  reflector
  libnewt
  man-db
  man-pages
  openssh
  ufw
)
pacstrap /mnt "${packages[@]}"

arch-chroot /mnt tee /etc/pacman.conf <<- EOF
	[options]
	HoldPkg = pacman glibc
	Architecture = auto
	SigLevel = PackageRequired DatabaseOptional
	LocalFileSigLevel = PackageOptional DatabaseOptional
	CheckSpace

	Include = /etc/pacman.d/conf/*

	[core]
	Include = /etc/pacman.d/mirrorlist

	[extra]
	Include = /etc/pacman.d/mirrorlist
EOF
arch-chroot /mnt mkdir --parents /etc/pacman.d/conf/
arch-chroot /mnt tee /etc/pacman.d/conf/color <<- EOF
	Color
EOF

arch-chroot /mnt tee /etc/xdg/reflector/reflector.conf < <(printf "%s %s\n" "${reflector_options[@]}")
arch-chroot /mnt tee /usr/local/bin/pacman-mirror-update <<- EOF
	#!/bin/bash

	if [[ -w /etc/pacman.d/mirrorlist ]]; then
	  /usr/bin/reflector --verbose @/etc/xdg/reflector/reflector.conf
	else
	  printf "%s\n" "Permission denied"
	  exit 1
	fi
EOF
arch-chroot /mnt chmod +x /usr/local/bin/pacman-mirror-update

genfstab -t UUID /mnt | tee /mnt/etc/fstab
arch-chroot /mnt sed --in-place --regexp-extended "s/[ \t]+/ /g" /etc/fstab

arch-chroot /mnt sed --in-place "s/#\(de_DE.UTF-8 UTF-8\)/\1/g" /etc/locale.gen
arch-chroot /mnt sed --in-place "s/#\(en_US.UTF-8 UTF-8\)/\1/g" /etc/locale.gen
arch-chroot /mnt locale-gen
arch-chroot /mnt tee /etc/locale.conf <<- EOF
	LANG=en_US.UTF-8
EOF
arch-chroot /mnt ln --symbolic --force "/usr/share/zoneinfo/${tz}" /etc/localtime
arch-chroot /mnt tee /etc/timezone <<- EOF
	${tz}
EOF

arch-chroot /mnt mkdir --parents /usr/local/share/kbd/keymaps/
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/us.map <<- EOF
	include "/usr/share/kbd/keymaps/i386/qwerty/us.map.gz"
	keymaps 0-3
	keycode 18 = e E euro
	keycode 22 = u U +udiaeresis +Udiaeresis
	keycode 24 = o O +odiaeresis +Odiaeresis
	keycode 30 = a A +adiaeresis +Adiaeresis
	keycode 31 = s S ssharp
EOF
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/de.map <<- EOF
	include "/usr/share/kbd/keymaps/i386/qwertz/de.map.gz"
	keycode 12 = ssharp question backslash
	keycode 13 = apostrophe grave
	keycode 26 = +udiaeresis +Udiaeresis
	keycode 27 = plus asterisk asciitilde
	keycode 39 = +odiaeresis +Odiaeresis
	keycode 40 = +adiaeresis +Adiaeresis
	keycode 41 = asciicircum degree
EOF
arch-chroot /mnt tee /etc/vconsole.conf <<- EOF
	KEYMAP=/usr/local/share/kbd/keymaps/${keymap}.map
EOF

arch-chroot /mnt tee /etc/hostname <<- EOF
	${hostname}
EOF
arch-chroot /mnt tee /etc/hosts <<- EOF
	127.0.0.1 localhost
	127.0.1.1 ${hostname}

	::1 localhost
EOF

arch-chroot /mnt tee /etc/systemd/system.conf <<- EOF
	[Manager]
	RebootWatchdogSec=off
EOF

arch-chroot /mnt tee /etc/systemd/logind.conf <<- EOF
	[Login]
	HandlePowerKey=ignore
	HandleSuspendKey=ignore
	HandleHibernateKey=ignore
EOF

arch-chroot /mnt tee "/etc/systemd/network/10-${interface}.network" <<- EOF
	[Match]
	Name=${interface}

	[Network]
	DHCP=yes
	LinkLocalAddressing=no

	[DHCP]
	UseDomains=yes
EOF
arch-chroot /mnt systemctl enable systemd-networkd.service

arch-chroot /mnt tee /etc/systemd/timesyncd.conf <<- EOF
	[Time]
	NTP=de.pool.ntp.org
EOF
arch-chroot /mnt systemctl enable systemd-timesyncd.service

arch-chroot /mnt tee /etc/systemd/resolved.conf <<- EOF
	[Resolve]
	DNS=
	FallbackDNS=
EOF
arch-chroot /mnt systemctl enable systemd-resolved.service
# Use plain chroot since arch-chroot mounts resolv.conf of the host system
chroot /mnt ln --symbolic --force /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

arch-chroot /mnt systemctl enable fstrim.timer

arch-chroot /mnt tee /etc/vimrc <<- EOF
	runtime! archlinux.vim
	let skip_defaults_vim=1
	set expandtab
	set hlsearch
	set ignorecase
	set incsearch
	set ruler
	set scrolloff=1
	set smartcase
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	set title
	set wrap
	syntax on
EOF

arch-chroot /mnt useradd --create-home --shell /bin/bash "${user}"
arch-chroot /mnt passwd "${user}" <<- EOF
	${user_password}
	${user_password}
EOF
arch-chroot /mnt tee "/etc/sudoers.d/${user}" <<- EOF
	${user} ALL=(ALL) ALL
EOF
arch-chroot /mnt chmod u=r,go= "/etc/sudoers.d/${user}"
arch-chroot /mnt tee /etc/sudoers.d/umask <<- EOF
	Defaults umask_override
EOF
arch-chroot /mnt chmod u=r,go= /etc/sudoers.d/umask
arch-chroot /mnt passwd --lock root
arch-chroot /mnt ln --symbolic /dev/null /root/.bash_history

if [[ "${interface}" == w* ]]; then
  arch-chroot /mnt pacman --noconfirm --sync iwd
  arch-chroot /mnt mkdir --parents /etc/iwd/
  arch-chroot /mnt tee /etc/iwd/main.conf <<- EOF
		[General]
		EnableNetworkConfiguration=false
	EOF
  arch-chroot /mnt mkdir --parents --mode=u=rwX,go= /var/lib/iwd/
  find /var/lib/iwd/ -type f -name "*.psk" -exec cp -- {} /mnt/var/lib/iwd/ \;
  arch-chroot /mnt systemctl enable "iwd.service"
  arch-chroot /mnt usermod --append --groups network "${user}"
fi

arch-chroot /mnt systemctl enable ufw.service
arch-chroot /mnt ufw default reject incoming
arch-chroot /mnt ufw default allow outgoing
arch-chroot /mnt ufw enable

arch-chroot /mnt tee /etc/ssh/ssh_config <<- EOF
	HostKeyAlgorithms ssh-ed25519

	KexAlgorithms curve25519-sha256@libssh.org
	Ciphers aes256-gcm@openssh.com
	MACs hmac-sha2-512-etm@openssh.com

	HashKnownHosts yes
	ServerAliveInterval 10
	StrictHostKeyChecking yes
EOF
arch-chroot /mnt tee /etc/ssh/sshd_config <<- EOF
	HostKey /etc/ssh/ssh_host_ed25519_key

	KexAlgorithms curve25519-sha256@libssh.org
	Ciphers aes256-gcm@openssh.com
	MACs hmac-sha2-512-etm@openssh.com

	AllowUsers ${user}
	AuthenticationMethods publickey
	LoginGraceTime 10
	PermitRootLogin no
	Subsystem sftp /usr/lib/ssh/sftp-server

	LogLevel VERBOSE
EOF

if [[ "${selection_enable_sshd}" == "yes" ]]; then
  arch-chroot /mnt systemctl enable sshd.service
  arch-chroot /mnt ufw allow proto tcp to any port 22
fi

unset microcode
if [[ "$(< /sys/devices/virtual/dmi/id/sys_vendor)" != "QEMU" ]]; then
  case "$(lscpu | awk 'BEGIN { FS=":[[:space:]]*" } $1 == "Vendor ID" { print $2 }')" in
  "AuthenticAMD")
    readonly microcode="amd-ucode"
    arch-chroot /mnt pacman --noconfirm --sync "${microcode}"
    ;;
  "GenuineIntel")
    readonly microcode="intel-ucode"
    arch-chroot /mnt pacman --noconfirm --sync "${microcode}"
    ;;
  esac
fi

readonly system_partition_id="$(blkid -s UUID -o value "${system_partition}")"
readonly virtual_block_device_id="$(blkid -s UUID -o value "${virtual_block_device}")"
readonly default_kernel_options=("cryptdevice=UUID=${system_partition_id}:${crypt_partition_id}:allow-discards")
readonly security_kernel_options=("lockdown=integrity")

arch-chroot /mnt tee /etc/mkinitcpio.conf <<- EOF
	MODULES=()
	BINARIES=()
	FILES=()
	HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems fsck)
EOF
if [[ "${boot_mode}" == "uefi" ]]; then
  arch-chroot /mnt mkdir --parents /etc/cmdline.d/
  arch-chroot /mnt tee /etc/cmdline.d/default.conf <<- EOF
		root=UUID=${virtual_block_device_id} ${default_kernel_options[*]} rw quiet
	EOF
  arch-chroot /mnt tee /etc/cmdline.d/security.conf <<- EOF
		${security_kernel_options[*]}
	EOF
  if [[ "${selection_default_efi}" == "yes" ]]; then
    arch-chroot /mnt mkdir --parents /efi/EFI/BOOT/
    readonly unified_kernel_image="EFI/BOOT/BOOTX64.EFI"
  else
    arch-chroot /mnt mkdir --parents /efi/EFI/Linux/
    readonly unified_kernel_image="EFI/Linux/arch-linux.efi"
  fi
  arch-chroot /mnt tee /etc/mkinitcpio.d/linux.preset <<- EOF
		PRESETS=("default")

		default_config="/etc/mkinitcpio.conf"
		default_kver="/boot/vmlinuz-linux"
		default_microcode=(\$(find /boot/ -name "*-ucode.img"))
		default_uki="/efi/${unified_kernel_image}"
	EOF
else
  arch-chroot /mnt tee /etc/mkinitcpio.d/linux.preset <<- EOF
		PRESETS=("default")

		default_config="/etc/mkinitcpio.conf"
		default_kver="/boot/vmlinuz-linux"
		default_image="/boot/initramfs-linux.img"
	EOF
fi
arch-chroot /mnt find /boot/ -name "initramfs-*.img" -delete
arch-chroot /mnt mkinitcpio --preset linux

if [[ "${boot_mode}" == "uefi" ]]; then
  arch-chroot /mnt pacman --noconfirm --sync efibootmgr
  if [[ "${selection_boot_entry}" == "yes" ]]; then
    efibootmgr --disk "${disk}" --create --label "Arch Linux" --loader "/${unified_kernel_image}"
  fi
else
  arch-chroot /mnt pacman --noconfirm --sync grub
  arch-chroot /mnt tee /etc/default/grub <<- EOF
		GRUB_DISTRIBUTOR="Arch"
		GRUB_DEFAULT=0
		GRUB_TIMEOUT=0
		GRUB_TIMEOUT_STYLE=hidden
		GRUB_DISABLE_RECOVERY=true
		GRUB_CMDLINE_LINUX="${default_kernel_options[*]} ${security_kernel_options[*]}"
		GRUB_CMDLINE_LINUX_DEFAULT="quiet"
	EOF
  arch-chroot /mnt grub-install "${disk}"
  arch-chroot /mnt grub-mkconfig --output=/boot/grub/grub.cfg
fi
