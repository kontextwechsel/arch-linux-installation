#!/bin/bash

# Installation script for Arch Linux system.

# TODO: Check return values (https://google.github.io/styleguide/shellguide.html#s8.1-checking-return-values)!

if [[ "${UID}" != 0 ]]; then
  exit 1
fi

readonly PROCESS_ID="$$"
trap "exit 1" SIGUSR1

readonly DEFAULT_HEIGHT=8
readonly DEFAULT_WIDTH=74

buffer=()
while IFS= read -r disk; do
  buffer+=("${disk}")
  if (("${#buffer[@]}" > 2)); then
    buffer+=("OFF")
  else
    buffer+=("ON")
  fi
done < <(parted --list --machine --script | awk 'BEGIN { RS = "\n\n" ; FS = "\n" } { print $2 }' | awk 'BEGIN { FS=":" } { print $1 }' | sort)
if (("${#buffer[@]}" == 0)); then
  whiptail --title "Arch Linux" --msgbox "No installation disk" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi
size="$(("${#buffer[@]}" / 2))"
readonly disk="$(whiptail --title "Arch Linux" --radiolist --noitem "Installation disk" "$(("${size}" + 7))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

buffer=()
while IFS= read -r interface; do
  if [[ -e "/sys/class/net/${interface}" ]]; then
    unset ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
    source <(udevadm info --query=property --export "/sys/class/net/${interface}")
    for name in ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC; do
      property="${!name}"
      if [[ -n "${property:+substitution}" ]]; then
        buffer+=("${property}")
        if (("${#buffer[@]}" > 2)); then
          buffer+=("OFF")
        else
          buffer+=("ON")
        fi
        break
      fi
    done
  fi
done < <(ip --brief link show | awk '{ print $1 }' | sort)
if (("${#buffer[@]}" == 0)); then
  whiptail --title "Arch Linux" --msgbox "No network interface" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi
size="$(("${#buffer[@]}" / 2))"
readonly interface="$(whiptail --title "Arch Linux" --radiolist --noitem "Network interface" "$(("${size}" + 7))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

readonly hostname="$(whiptail --title "Arch Linux" --inputbox "Hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
if [[ ! "${hostname}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
  whiptail --title "Arch Linux" --msgbox "Invalid hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi

readonly user="$(whiptail --title "Arch Linux" --inputbox "Username" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
if [[ ! "${user}" =~ ^[a-z0-9_-]{1,30}$ ]]; then
  whiptail --title "Arch Linux" --msgbox "Invalid user" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi

readonly user_password="$(whiptail --title "Arch Linux" --passwordbox "User password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
if [[ ! "${user_password}" =~ ^.{8,}$ ]]; then
  whiptail --title "Arch Linux" --msgbox "Minimum password length is 8 characters" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi

if whiptail --title "Arch Linux" --yesno "Use password for disk encryption?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3; then
  disk_encryption_password="${user_password}"
else
  disk_encryption_password="$(whiptail --title "Arch Linux" --passwordbox "Disk Encryption Password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
  if [[ ! "${disk_encryption_password}" =~ ^.{8,}$ ]]; then
    whiptail --title "Arch Linux" --msgbox "Minimum password length is 8 characters" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
    exit 1
  fi
fi
readonly disk_encryption_password

tz="$(whiptail --title "Arch Linux" --inputbox "Time zone" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "Europe/Berlin" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"
readonly tz="$(timedatectl list-timezones | grep --ignore-case "^${tz}$")"
if [[ -z "${tz}" ]]; then
  whiptail --title "Arch Linux" --msgbox "Invalid time zone" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
  exit 1
fi

buffer=(
  "us" "English (ANSI)" "ON"
  "de" "German (ISO)" "OFF"
)
size="$(("${#buffer[@]}" / 3))"
readonly keymap="$(whiptail --title "Arch Linux" --radiolist --notags "Keyboard layout" "$(("${size}" + 7))" "${DEFAULT_WIDTH}" "${size}" "${buffer[@]}" 3>&1 1>&2 2>&3 || kill -SIGUSR1 "${PROCESS_ID}")"

set -x

if [[ "${disk}" == *nvm* ]]; then
  boot_partition="${disk}p1"
  system_partition="${disk}p2"
else
  boot_partition="${disk}1"
  system_partition="${disk}2"
fi
readonly boot_partition
readonly system_partition

if [[ -d /sys/firmware/efi/efivars ]]; then
  parted --script "${disk}" mklabel gpt || exit 1
  parted --script "${disk}" mkpart EFI 4MiB 516MiB
  parted --script "${disk}" mkpart LINUX 516MiB 100%
  parted --script "${disk}" set 1 esp on
  partprobe "${disk}"
  mkfs.fat -F32 "${boot_partition}"
else
  parted --script "${disk}" mklabel msdos || exit 1
  parted --script "${disk}" mkpart primary 4MiB 516MiB
  parted --script "${disk}" mkpart primary 516MiB 100%
  parted --script "${disk}" set 1 boot on
  partprobe "${disk}"
  mkfs.ext4 "${boot_partition}"
fi
cryptsetup --batch-mode luksFormat "${system_partition}" <<- EOF
	${disk_encryption_password}
	${disk_encryption_password}
EOF
readonly crypt_partition_id="$(uuidgen)"
cryptsetup open "${system_partition}" "${crypt_partition_id}" <<- EOF
	${disk_encryption_password}
EOF
readonly virtual_block_device="/dev/mapper/${crypt_partition_id}"
mkfs.ext4 "${virtual_block_device}"
mount "${virtual_block_device}" /mnt
mkdir --parents /mnt/boot/
mount "${boot_partition}" /mnt/boot

function unmount_filesystems() {
  umount --force --recursive --verbose /mnt
  cryptsetup close "${crypt_partition_id}"
}
trap unmount_filesystems EXIT

tee /etc/pacman.d/mirrorlist <<- EOF
	Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch
	Server = https://mirrors.mit.edu/archlinux/\$repo/os/\$arch
EOF
pacman --sync --noconfirm archlinux-keyring
pacman --sync --refresh --refresh

readonly packages=(
  base
  base-devel
  linux
  linux-firmware
  sudo
  vim
)
pacstrap /mnt "${packages[@]}"
genfstab -t UUID /mnt | tee /mnt/etc/fstab

arch-chroot /mnt sed --in-place "s/#\(de_DE.UTF-8 UTF-8\)/\1/g" /etc/locale.gen
arch-chroot /mnt sed --in-place "s/#\(en_US.UTF-8 UTF-8\)/\1/g" /etc/locale.gen
arch-chroot /mnt locale-gen
arch-chroot /mnt tee /etc/locale.conf <<- EOF
	LANG=en_US.UTF-8
EOF
arch-chroot /mnt ln --symbolic --force "/usr/share/zoneinfo/${tz}" /etc/localtime
arch-chroot /mnt tee /etc/timezone <<- EOF
	${tz}
EOF

arch-chroot /mnt mkdir --parents /usr/local/share/kbd/keymaps/
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/us.map <<- EOF
	include "/usr/share/kbd/keymaps/i386/qwerty/us.map.gz"
	keymaps 0-3
	keycode 18 = e E euro
	keycode 22 = u U +udiaeresis +Udiaeresis
	keycode 24 = o O +odiaeresis +Odiaeresis
	keycode 30 = a A +adiaeresis +Adiaeresis
	keycode 31 = s S ssharp
EOF
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/de.map <<- EOF
	include "/usr/share/kbd/keymaps/i386/qwertz/de.map.gz"
	keycode 12 = ssharp question backslash
	keycode 13 = apostrophe grave
	keycode 26 = +udiaeresis +Udiaeresis
	keycode 27 = plus asterisk asciitilde
	keycode 39 = +odiaeresis +Odiaeresis
	keycode 40 = +adiaeresis +Adiaeresis
	keycode 41 = asciicircum degree
EOF
arch-chroot /mnt tee /etc/vconsole.conf <<- EOF
	KEYMAP=/usr/local/share/kbd/keymaps/${keymap}.map
EOF

arch-chroot /mnt tee /etc/hostname <<- EOF
	${hostname}
EOF
arch-chroot /mnt tee /etc/hosts <<- EOF
	127.0.0.1 localhost
	::1 localhost
	127.0.1.1 ${hostname}
EOF

arch-chroot /mnt tee /etc/systemd/system.conf <<- EOF
	[Manager]
	RebootWatchdogSec=off
EOF

arch-chroot /mnt tee /etc/systemd/logind.conf <<- EOF
	[Login]
	HandlePowerKey=ignore
	HandleSuspendKey=ignore
	HandleHibernateKey=ignore
EOF

arch-chroot /mnt tee "/etc/systemd/network/10-${interface}.network" <<- EOF
	[Match]
	Name=${interface}

	[Network]
	DHCP=ipv4

	[DHCP]
	UseDomains=true
EOF
arch-chroot /mnt systemctl enable systemd-networkd.service

arch-chroot /mnt tee /etc/systemd/timesyncd.conf <<- EOF
	[Time]
	NTP=de.pool.ntp.org
EOF
arch-chroot /mnt systemctl enable systemd-timesyncd.service

arch-chroot /mnt tee /etc/systemd/resolved.conf <<- EOF
	[Resolve]
	DNS=
	FallbackDNS=
EOF
arch-chroot /mnt systemctl enable systemd-resolved.service
# Use plain chroot since arch-chroot mounts resolv.conf of the host system
chroot /mnt ln --symbolic --force /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

arch-chroot /mnt systemctl enable fstrim.timer

arch-chroot /mnt tee /etc/vimrc <<- EOF
	runtime! archlinux.vim
	let skip_defaults_vim=1
	set expandtab
	set hlsearch
	set ignorecase
	set incsearch
	set ruler
	set scrolloff=1
	set smartcase
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	set title
	set wrap
	syntax on
EOF

arch-chroot /mnt useradd --create-home --shell /bin/bash "${user}"
arch-chroot /mnt passwd "${user}" <<- EOF
	${user_password}
	${user_password}
EOF
arch-chroot /mnt tee "/etc/sudoers.d/${user}" <<- EOF
	${user} ALL=(ALL) ALL
EOF
arch-chroot /mnt chmod u=r,go= "/etc/sudoers.d/${user}"
arch-chroot /mnt tee /etc/sudoers.d/umask <<- EOF
	Defaults umask_override
EOF
arch-chroot /mnt chmod u=r,go= /etc/sudoers.d/umask
arch-chroot /mnt passwd --lock root
arch-chroot /mnt ln --symbolic /dev/null /root/.bash_history

if [[ "${interface}" == w* ]]; then
  arch-chroot /mnt pacman --noconfirm --sync wpa_supplicant
  arch-chroot /mnt tee "/etc/wpa_supplicant/wpa_supplicant-${interface}.conf" <<- EOF
		ctrl_interface=/run/wpa_supplicant
		ctrl_interface_group=${user}
		update_config=1
	EOF
  arch-chroot /mnt chmod u=rw,go= "/etc/wpa_supplicant/wpa_supplicant-${interface}.conf"
  arch-chroot /mnt tee /usr/local/bin/wpa_cli <<- EOF
		#!/bin/bash

		/usr/bin/wpa_cli -i ${interface}
	EOF
  arch-chroot /mnt chmod +x /usr/local/bin/wpa_cli
  arch-chroot /mnt systemctl enable "wpa_supplicant@${interface}.service"
fi

unset microcode_image
if [[ "$(< /sys/devices/virtual/dmi/id/sys_vendor)" != "QEMU" ]]; then
  case "$(lscpu | awk 'BEGIN { FS=":[[:space:]]*" } $1 == "Vendor ID" { print $2 }')" in
  "AuthenticAMD")
    arch-chroot /mnt pacman --noconfirm --sync amd-ucode
    microcode_image="amd-ucode.img"
    ;;
  "GenuineIntel")
    arch-chroot /mnt pacman --noconfirm --sync intel-ucode
    microcode_image="intel-ucode.img"
    ;;
  esac
fi
readonly microcode_image

arch-chroot /mnt tee /etc/mkinitcpio.conf <<- EOF
	MODULES=()
	BINARIES=()
	FILES=()
	HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems fsck)
EOF
arch-chroot /mnt mkinitcpio --preset linux

readonly system_partition_id="$(blkid -s UUID -o value "${system_partition}")"
readonly virtual_block_device_id="$(blkid -s UUID -o value "${virtual_block_device}")"

if [[ -d /sys/firmware/efi/efivars ]]; then
  arch-chroot /mnt pacman --noconfirm --sync efibootmgr
  arch-chroot /mnt bootctl install
  arch-chroot /mnt tee /boot/loader/loader.conf <<- EOF
		default default.conf
		console-mode max
		timeout 0
		auto-entries false
		auto-firmware true
		editor false
	EOF
  arch-chroot /mnt tee /boot/loader/entries/default.conf <<- EOF
		title Arch Linux
		linux /vmlinuz-linux
	EOF
  if [[ -n "${microcode_image:+substitution}" ]]; then
    arch-chroot /mnt tee --append /boot/loader/entries/default.conf <<- EOF
			initrd /${microcode_image}
		EOF
  fi
  arch-chroot /mnt tee --append /boot/loader/entries/default.conf <<- EOF
		initrd /initramfs-linux.img
		options cryptdevice=UUID=${system_partition_id}:${crypt_partition_id}:allow-discards root=UUID=${virtual_block_device_id} rw quiet
	EOF
  arch-chroot /mnt mkdir --parents /etc/pacman.d/hooks/
  arch-chroot /mnt tee /etc/pacman.d/hooks/10-systemd-boot.hook <<- EOF
		[Trigger]
		Type = Package
		Operation = Upgrade
		Target = systemd

		[Action]
		When = PostTransaction
		Exec = /usr/bin/bootctl update
	EOF
else
  arch-chroot /mnt pacman --noconfirm --sync grub
  arch-chroot /mnt tee /etc/default/grub <<- EOF
		GRUB_DISTRIBUTOR="Arch"
		GRUB_DEFAULT=0
		GRUB_TIMEOUT=0
		GRUB_TIMEOUT_STYLE=hidden
		GRUB_DISABLE_RECOVERY=true
		GRUB_CMDLINE_LINUX="cryptdevice=UUID=${system_partition_id}:${crypt_partition_id}:allow-discards"
		GRUB_CMDLINE_LINUX_DEFAULT="quiet"
	EOF
  arch-chroot /mnt grub-install "${disk}"
  arch-chroot /mnt grub-mkconfig --output=/boot/grub/grub.cfg
fi
