#!/bin/bash

sudo true || exit 1

PROCESS_ID="$$"
trap "exit 1" USR1

DEFAULT_HEIGHT="8"
DEFAULT_WIDTH="74"

BUFFER=()
while IFS= read -r DISK; do
	BUFFER+=("${DISK}")
	if [[ "${#BUFFER[@]}" -gt 2 ]]; then
		BUFFER+=("OFF")
	else
		BUFFER+=("ON")
	fi
done <<< "$(sudo parted --list --machine --script | awk 'BEGIN { RS = "\n\n" ; FS = "\n" } { print $2 }' | awk 'BEGIN { FS=":" } { print $1 }' | sort)"
if [[ "${#BUFFER[@]}" -eq 0 ]]; then
	whiptail --title "Arch Linux" --msgbox "No installation disk" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi
LENGTH="$(("${#BUFFER[@]}" / 2))"
HEIGHT="$(("${LENGTH}" + 7))"
DISK="$(whiptail --title "Arch Linux" --radiolist --noitem "Installation disk" "${HEIGHT}" "${DEFAULT_WIDTH}" "${LENGTH}" "${BUFFER[@]}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"

BUFFER=()
while IFS= read -r NIC; do
	if [[ -e "/sys/class/net/${NIC}" ]]; then
		unset ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
		source <(udevadm info --query=property --export "/sys/class/net/${NIC}")
		for NAME in ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC; do
			eval PROPERTY=\$"${NAME}"
			if [[ -n "${PROPERTY:+SUBSTITUTION}" ]]; then
				BUFFER+=("${PROPERTY}")
				if [[ "${#BUFFER[@]}" -gt 2 ]]; then
					BUFFER+=("OFF")
				else
					BUFFER+=("ON")
				fi
				break
			fi
		done
	fi
done <<< "$(ip --brief link show | awk '{ print $1 }' | sort)"
if [[ "${#BUFFER[@]}" -eq 0 ]]; then
	whiptail --title "Arch Linux" --msgbox "No network interface" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi
LENGTH="$(("${#BUFFER[@]}" / 2))"
HEIGHT="$(("${LENGTH}" + 7))"
NIC="$(whiptail --title "Arch Linux" --radiolist --noitem "Network interface" "${HEIGHT}" "${DEFAULT_WIDTH}" "${LENGTH}" "${BUFFER[@]}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"

HOSTNAME="$(whiptail --title "Arch Linux" --inputbox "Hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"
if [[ ! "${HOSTNAME}" =~ ^[a-zA-Z0-9._-]+$ ]]; then
	whiptail --title "Arch Linux" --msgbox "Invalid hostname" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi

USER="$(whiptail --title "Arch Linux" --inputbox "User" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"
if [[ ! "${USER}" =~ ^[a-z0-9_-]{1,30}$ ]]; then
	whiptail --title "Arch Linux" --msgbox "Invalid user" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi

PASSWORD="$(whiptail --title "Arch Linux" --passwordbox "Password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"
if [[ ! "${PASSWORD}" =~ ^.{6,}$ ]]; then
	whiptail --title "Arch Linux" --msgbox "Invalid password" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi

TZ="$(whiptail --title "Arch Linux" --inputbox "Time zone" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" "Europe/Berlin" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"
TZ="$(timedatectl list-timezones | grep -iP "^${TZ}$")"
if [[ -z "${TZ}" ]]; then
	whiptail --title "Arch Linux" --msgbox "Invalid time zone" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}"
	exit 1
fi

BUFFER=(
	"de" "German (ISO)" "ON"
	"us" "English (ANSI)" "OFF"
)
LENGTH="$(("${#BUFFER[@]}" / 3))"
HEIGHT="$(("${LENGTH}" + 7))"
KEYMAP="$(whiptail --title "Arch Linux" --radiolist --notags "Keyboard layout" "${HEIGHT}" "${DEFAULT_WIDTH}" "${LENGTH}" "${BUFFER[@]}" 3>&1 1>&2 2>&3 || kill -USR1 "${PROCESS_ID}")"

set -x

if [[ "${DISK}" = *nvm* ]]; then
	BOOT_PARTITION="${DISK}p1"
	SYSTEM_PARTITION="${DISK}p2"
else
	BOOT_PARTITION="${DISK}1"
	SYSTEM_PARTITION="${DISK}2"
fi

if [[ -d /sys/firmware/efi/efivars ]]; then
	parted --script "${DISK}" mklabel gpt
	parted --script "${DISK}" mkpart EFI 4MiB 516MiB
	parted --script "${DISK}" mkpart LINUX 516MiB 100%
	parted --script "${DISK}" set 1 esp on
	partprobe "${DISK}"
	mkfs.fat -F32 "${BOOT_PARTITION}"
else
	parted --script "${DISK}" mklabel msdos
	parted --script "${DISK}" mkpart primary 4MiB 516MiB
	parted --script "${DISK}" mkpart primary 516MiB 100%
	parted --script "${DISK}" set 1 boot on
	partprobe "${DISK}"
	mkfs.ext4 "${BOOT_PARTITION}"
fi
cryptsetup --batch-mode luksFormat "${SYSTEM_PARTITION}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
CRYPT_PARTITION_ID="$(uuidgen)"
cryptsetup open "${SYSTEM_PARTITION}" "${CRYPT_PARTITION_ID}" <<-EOF
	${PASSWORD}
EOF
mkfs.ext4 "/dev/mapper/${CRYPT_PARTITION_ID}"
mount "/dev/mapper/${CRYPT_PARTITION_ID}" /mnt
mkdir /mnt/boot
mount "${BOOT_PARTITION}" /mnt/boot

tee /etc/pacman.d/mirrorlist <<-EOF
	Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch
	Server = https://mirrors.mit.edu/archlinux/\$repo/os/\$arch
EOF
pacman -Syy

PACKAGES=(
	base
	base-devel
	linux
	linux-firmware
	sudo
	vim
)
pacstrap /mnt "${PACKAGES[@]}"
genfstab -U /mnt | tee /mnt/etc/fstab

arch-chroot /mnt sed -i -r "s/#(de_DE.UTF-8 UTF-8)/\1/g" /etc/locale.gen
arch-chroot /mnt sed -i -r "s/#(en_US.UTF-8 UTF-8)/\1/g" /etc/locale.gen
arch-chroot /mnt locale-gen
arch-chroot /mnt tee /etc/locale.conf <<-EOF
	LANG=en_US.UTF-8
EOF
arch-chroot /mnt ln -sf "/usr/share/zoneinfo/${TZ}" /etc/localtime
arch-chroot /mnt tee /etc/timezone <<-EOF
	${TZ}
EOF

arch-chroot /mnt mkdir -p /usr/local/share/kbd/keymaps
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/de.map <<-EOF
	include "/usr/share/kbd/keymaps/i386/qwertz/de.map.gz"
	keycode 12 = ssharp question backslash
	keycode 13 = apostrophe grave
	keycode 26 = +udiaeresis +Udiaeresis
	keycode 27 = plus asterisk asciitilde
	keycode 39 = +odiaeresis +Odiaeresis
	keycode 40 = +adiaeresis +Adiaeresis
	keycode 41 = asciicircum degree
EOF
arch-chroot /mnt tee /usr/local/share/kbd/keymaps/us.map <<-EOF
	include "/usr/share/kbd/keymaps/i386/qwerty/us.map.gz"
	keymaps 0-3
	keycode 18 = e E euro
	keycode 22 = u U +udiaeresis +Udiaeresis
	keycode 24 = o O +odiaeresis +Odiaeresis
	keycode 30 = a A +adiaeresis +Adiaeresis
	keycode 31 = s S ssharp
EOF
arch-chroot /mnt tee /etc/vconsole.conf <<-EOF
	KEYMAP=/usr/local/share/kbd/keymaps/${KEYMAP}.map
EOF

arch-chroot /mnt tee /etc/hostname <<-EOF
	${HOSTNAME}
EOF
arch-chroot /mnt tee /etc/hosts <<-EOF
	127.0.0.1 localhost
	::1 localhost
	127.0.1.1 ${HOSTNAME}
EOF

arch-chroot /mnt tee /etc/systemd/system.conf <<-EOF
	[Manager]
	RebootWatchdogSec=off
EOF

arch-chroot /mnt tee /etc/systemd/logind.conf <<-EOF
	[Login]
	HandlePowerKey=ignore
	HandleSuspendKey=ignore
	HandleHibernateKey=ignore
EOF

arch-chroot /mnt tee "/etc/systemd/network/10-${NIC}.network" <<-EOF
	[Match]
	Name=${NIC}

	[Network]
	DHCP=ipv4

	[DHCP]
	UseDomains=true
EOF
arch-chroot /mnt systemctl enable systemd-networkd.service

arch-chroot /mnt tee /etc/systemd/timesyncd.conf <<-EOF
	[Time]
	NTP=de.pool.ntp.org
EOF
arch-chroot /mnt systemctl enable systemd-timesyncd.service

arch-chroot /mnt tee /etc/systemd/resolved.conf <<-EOF
	[Resolve]
	DNS=
	FallbackDNS=
EOF
arch-chroot /mnt systemctl enable systemd-resolved.service
chroot /mnt ln -s -f /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

arch-chroot /mnt systemctl enable fstrim.timer

arch-chroot /mnt tee /etc/vimrc <<-EOF
	runtime! archlinux.vim
	let skip_defaults_vim=1
	set expandtab
	set ignorecase
	set smartcase
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	syntax on
EOF

arch-chroot /mnt useradd -m -s /bin/bash "${USER}"
arch-chroot /mnt passwd "${USER}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
arch-chroot /mnt tee "/etc/sudoers.d/${USER}" <<-EOF
	${USER} ALL=(ALL) ALL
	${USER} ALL=(ALL) NOPASSWD: /usr/bin/ip
EOF
arch-chroot /mnt chmod u=r,go= "/etc/sudoers.d/${USER}"
arch-chroot /mnt tee /etc/sudoers.d/umask <<-EOF
	Defaults umask_override
EOF
arch-chroot /mnt chmod u=r,go= /etc/sudoers.d/umask
arch-chroot /mnt passwd -l root
arch-chroot /mnt ln -s /dev/null /root/.bash_history

if [[ "${NIC}" = w* ]]; then
	arch-chroot /mnt pacman --noconfirm -S wpa_supplicant
	arch-chroot /mnt tee "/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf" <<-EOF
		ctrl_interface=/run/wpa_supplicant
		ctrl_interface_group=${USER}
		update_config=1
	EOF
	arch-chroot /mnt chmod u=rw,go= "/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf"
	arch-chroot /mnt tee /usr/local/bin/wpa_cli <<-EOF
		#!/bin/bash

		/usr/bin/wpa_cli -i ${NIC}
	EOF
	arch-chroot /mnt chmod +x /usr/local/bin/wpa_cli
	arch-chroot /mnt systemctl enable "wpa_supplicant@${NIC}.service"
fi

unset MICROCODE_IMAGE
if [[ "$(</sys/devices/virtual/dmi/id/sys_vendor)" != QEMU ]]; then
	case "$(lscpu | awk 'BEGIN { FS=":[[:space:]]*" } $1 == "Vendor ID" { print $2 }')" in
		"AuthenticAMD")
			arch-chroot /mnt pacman --noconfirm -S amd-ucode
			MICROCODE_IMAGE="amd-ucode.img"
			;;
		"GenuineIntel")
			arch-chroot /mnt pacman --noconfirm -S intel-ucode
			MICROCODE_IMAGE="intel-ucode.img"
			;;
	esac
fi

arch-chroot /mnt tee /etc/mkinitcpio.conf <<-EOF
	MODULES=()
	BINARIES=()
	FILES=()
	HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems fsck)
EOF
arch-chroot /mnt mkinitcpio -p linux

while IFS= read -r ENTRY; do
	if [[ "$(readlink -f "/dev/disk/by-uuid/${ENTRY}")" = "${SYSTEM_PARTITION}" ]]; then
		SYSTEM_PARTITION_UUID="${ENTRY}"
	fi
	if [[ "$(readlink -f "/dev/disk/by-uuid/${ENTRY}")" = "$(readlink -f "/dev/mapper/${CRYPT_PARTITION_ID}")" ]]; then
		CRYPT_PARTITION_UUID="${ENTRY}"
	fi
done <<< "$(ls /dev/disk/by-uuid)"
if [[ -d /sys/firmware/efi/efivars ]]; then
	arch-chroot /mnt pacman --noconfirm -S efibootmgr
	arch-chroot /mnt bootctl install
	arch-chroot /mnt tee /boot/loader/loader.conf <<-EOF
		default default.conf
		console-mode max
		timeout 0
		auto-entries false
		auto-firmware true
		editor false
	EOF
	arch-chroot /mnt tee /boot/loader/entries/default.conf <<-EOF
		title Arch Linux
		linux /vmlinuz-linux
	EOF
	if [[ -n "${MICROCODE_IMAGE:+SUBSTITUTION}" ]]; then
		arch-chroot /mnt tee -a /boot/loader/entries/default.conf <<-EOF
			initrd /${MICROCODE_IMAGE}
		EOF
	fi
	arch-chroot /mnt tee -a /boot/loader/entries/default.conf <<-EOF
		initrd /initramfs-linux.img
		options cryptdevice=UUID=${SYSTEM_PARTITION_UUID}:${CRYPT_PARTITION_ID}:allow-discards root=UUID=${CRYPT_PARTITION_UUID} rw quiet
	EOF
	arch-chroot /mnt mkdir /etc/pacman.d/hooks
	arch-chroot /mnt tee /etc/pacman.d/hooks/10-systemd-boot.hook <<-EOF
		[Trigger]
		Type = Package
		Operation = Upgrade
		Target = systemd

		[Action]
		When = PostTransaction
		Exec = /usr/bin/bootctl update
	EOF
else
	arch-chroot /mnt pacman --noconfirm -S grub
	arch-chroot /mnt tee /etc/default/grub <<-EOF
		GRUB_DISTRIBUTOR="Arch"
		GRUB_DEFAULT=0
		GRUB_TIMEOUT=0
		GRUB_TIMEOUT_STYLE=hidden
		GRUB_DISABLE_RECOVERY=true
		GRUB_CMDLINE_LINUX="cryptdevice=UUID=${SYSTEM_PARTITION_UUID}:${CRYPT_PARTITION_ID}:allow-discards"
		GRUB_CMDLINE_LINUX_DEFAULT="quiet"
	EOF
	arch-chroot /mnt grub-install "${DISK}"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi
