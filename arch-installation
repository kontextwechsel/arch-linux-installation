#!/bin/bash

sudo /bin/true || exit 1

BUFFER=()
while IFS= read -r DISK
	do
		BUFFER+=("${DISK}")
		BUFFER+=("")
		if [[ ${#BUFFER[@]} -gt 3 ]]
			then
				BUFFER+=("OFF")
			else
				BUFFER+=("ON")
		fi
done <<< $(sudo parted --list --machine --script | awk 'BEGIN { RS = "\n\n" ; FS = "\n" } { print $2 }' | awk 'BEGIN { FS=":" } { print $1 }' | sort)
[[ ${#BUFFER[@]} -gt 0 ]] || exit 1
LENGTH=$((${#BUFFER[@]} / 3))
HEIGHT=$((${LENGTH} + 7))
DISK=$(whiptail --title "Arch Linux" --radiolist "Installation disk" "${HEIGHT}" 78 "${LENGTH}" "${BUFFER[@]}" 3>&1 1>&2 2>&3)
[[ -z "${DISK}" ]] && exit 1

BUFFER=()
while IFS= read -r NIC
	do
		if [[ -e "/sys/class/net/${NIC}" ]]
			then
				unset ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
				source <(udevadm info --query=property --export "/sys/class/net/${NIC}")
				for NAME in ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
					do
						eval PROPERTY=\$"${NAME}"
						if [[ -n ${PROPERTY:+SUBSTITUTION} ]]
							then
								BUFFER+=("${PROPERTY}")
								BUFFER+=("")
								if [[ ${#BUFFER[@]} -gt 3 ]]
									then
										BUFFER+=("OFF")
									else
										BUFFER+=("ON")
								fi
								break
						fi
					done
		fi
	done <<< $(ip --brief link show | awk '{ print $1 }' | sort)
[[ ${#BUFFER[@]} -gt 0 ]] || exit 1
LENGTH=$((${#BUFFER[@]} / 3))
HEIGHT=$((${LENGTH} + 7))
NIC=$(whiptail --title "Arch Linux" --radiolist "Network interface" "${HEIGHT}" 78 "${LENGTH}" "${BUFFER[@]}" 3>&1 1>&2 2>&3)
[[ -z "${NIC}" ]] && exit 1

HOSTNAME=$(whiptail --title "Arch Linux" --inputbox "Hostname" 8 78 3>&1 1>&2 2>&3)
[[ -z "${HOSTNAME}" ]] && exit 1

USER=$(whiptail --title "Arch Linux" --inputbox "User" 8 78 3>&1 1>&2 2>&3)
[[ -z "${USER}" ]] && exit 1

PASSWORD=$(whiptail --title "Arch Linux" --passwordbox "Password" 8 78 3>&1 1>&2 2>&3)
[[ -z "${PASSWORD}" ]] && exit 1

set -x

if [[ "${DISK}" = *nvm* ]]
	then
		BOOT_PARTITION="${DISK}p1"
		SYSTEM_PARTITION="${DISK}p2"
	else
		BOOT_PARTITION="${DISK}1"
		SYSTEM_PARTITION="${DISK}2"
fi

if [[ -d /sys/firmware/efi/efivars ]]
	then
		parted --script "${DISK}" mklabel gpt
		parted --script "${DISK}" mkpart EFI 4MiB 516MiB
		parted --script "${DISK}" mkpart LINUX 516MiB 100%
		parted --script "${DISK}" set 1 esp on
		partprobe "${DISK}"
		mkfs.fat -F32 "${BOOT_PARTITION}"
	else
		parted --script "${DISK}" mklabel msdos
		parted --script "${DISK}" mkpart primary 4MiB 516MiB
		parted --script "${DISK}" mkpart primary 516MiB 100%
		parted --script "${DISK}" set 1 boot on
		partprobe "${DISK}"
		mkfs.ext4 "${BOOT_PARTITION}"
fi
cryptsetup --batch-mode luksFormat "${SYSTEM_PARTITION}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
CRYPT_PARTITION_ID="$(uuidgen)"
cryptsetup open "${SYSTEM_PARTITION}" "${CRYPT_PARTITION_ID}" <<-EOF
	${PASSWORD}
EOF
mkfs.ext4 "/dev/mapper/${CRYPT_PARTITION_ID}"
mount "/dev/mapper/${CRYPT_PARTITION_ID}" /mnt
mkdir /mnt/boot
mount "${BOOT_PARTITION}" /mnt/boot

tee /etc/pacman.d/mirrorlist <<-EOF
	Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch
	Server = https://mirrors.mit.edu/archlinux/\$repo/os/\$arch
EOF
pacman -Syy

PACKAGES=(
	base
	base-devel
	linux
	linux-firmware
	sudo
	vim
)
pacstrap /mnt "${PACKAGES[@]}"
genfstab -U /mnt > /mnt/etc/fstab

arch-chroot /mnt sed -i -r s/"#(de_DE.UTF-8 UTF-8)"/"\1"/g /etc/locale.gen
arch-chroot /mnt sed -i -r s/"#(en_US.UTF-8 UTF-8)"/"\1"/g /etc/locale.gen
arch-chroot /mnt locale-gen
arch-chroot /mnt tee /etc/locale.conf <<-EOF
	LANG=en_US.UTF-8
EOF
arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
arch-chroot /mnt tee /etc/timezone <<-EOF
	Europe/Berlin
EOF
arch-chroot /mnt tee /etc/vconsole.conf <<-EOF
	KEYMAP=de-latin1-nodeadkeys
EOF

arch-chroot /mnt tee /etc/hostname <<-EOF
	${HOSTNAME}
EOF
arch-chroot /mnt tee /etc/hosts <<-EOF
	127.0.0.1 localhost
	::1 localhost
	127.0.1.1 ${HOSTNAME}
EOF

arch-chroot /mnt tee /etc/systemd/logind.conf <<-EOF
	[Login]
	HandlePowerKey=ignore
	HandleSuspendKey=ignore
	HandleHibernateKey=ignore
EOF

arch-chroot /mnt tee "/etc/systemd/network/10-${NIC}.network" <<-EOF
	[Match]
	Name=${NIC}

	[Network]
	DHCP=ipv4

	[DHCP]
	UseDomains=true
EOF
arch-chroot /mnt systemctl enable systemd-networkd.service

arch-chroot /mnt tee /etc/systemd/timesyncd.conf <<-EOF
	[Time]
	NTP=de.pool.ntp.org
EOF
arch-chroot /mnt systemctl enable systemd-timesyncd.service

arch-chroot /mnt ln -sf /var/run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
arch-chroot /mnt systemctl enable systemd-resolved.service

arch-chroot /mnt systemctl enable fstrim.timer

arch-chroot /mnt tee /etc/vimrc <<-EOF
	runtime! archlinux.vim
	let skip_defaults_vim=1
	set expandtab
	set ignorecase
	set smartcase
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	syntax on
EOF

arch-chroot /mnt useradd -m -s /bin/bash "${USER}"
arch-chroot /mnt passwd "${USER}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
arch-chroot /mnt tee "/etc/sudoers.d/${USER}" <<-EOF
	${USER} ALL=(ALL) ALL
	${USER} ALL=(ALL) NOPASSWD: /usr/bin/ip
EOF
arch-chroot /mnt chmod u=r,go= "/etc/sudoers.d/${USER}"
arch-chroot /mnt tee /etc/sudoers.d/umask <<-EOF
	Defaults umask_override
EOF
arch-chroot /mnt chmod u=r,go= /etc/sudoers.d/umask
arch-chroot /mnt passwd -l root
arch-chroot /mnt ln -s /dev/null /root/.bash_history

if [[ "${NIC}" = w* ]]
	then
		arch-chroot /mnt pacman --noconfirm -S wpa_supplicant
		arch-chroot /mnt tee "/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf" <<-EOF
			ctrl_interface=/run/wpa_supplicant
			ctrl_interface_group=${USER}
			update_config=1
		EOF
		arch-chroot /mnt chmod u=rw,go= "/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf"
		arch-chroot /mnt tee /usr/local/bin/wpa_cli <<-EOF
			#!/bin/bash

			/usr/bin/wpa_cli -i ${NIC}
		EOF
		arch-chroot /mnt chmod +x /usr/local/bin/wpa_cli
		arch-chroot /mnt systemctl enable "wpa_supplicant@${NIC}.service"
fi

unset MICROCODE_IMAGE
if [[ "$(</sys/devices/virtual/dmi/id/sys_vendor)" != QEMU ]]
	then
		case "$(lscpu | awk 'BEGIN { FS=":[[:space:]]*" } $1 == "Vendor ID" { print $2 }')" in
			"AuthenticAMD")
				arch-chroot /mnt pacman --noconfirm -S amd-ucode
				MICROCODE_IMAGE="amd-ucode.img"
				;;
			"GenuineIntel")
				arch-chroot /mnt pacman --noconfirm -S intel-ucode
				MICROCODE_IMAGE="intel-ucode.img"
				;;
		esac
fi

arch-chroot /mnt tee /etc/mkinitcpio.conf <<-EOF
	MODULES=()
	BINARIES=()
	FILES=()
	HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems fsck)
EOF
arch-chroot /mnt mkinitcpio -p linux

for ENTRY in $(ls /dev/disk/by-uuid)
	do
		if [[ "$(readlink -f "/dev/disk/by-uuid/${ENTRY}")" = "${SYSTEM_PARTITION}" ]]
			then
				SYSTEM_PARTITION_UUID="${ENTRY}"
		fi
		if [[ "$(readlink -f "/dev/disk/by-uuid/${ENTRY}")" = "$(readlink -f "/dev/mapper/${CRYPT_PARTITION_ID}")" ]]
			then
				CRYPT_PARTITION_UUID="${ENTRY}"
		fi
	done
if [[ -d /sys/firmware/efi/efivars ]]
	then
		arch-chroot /mnt pacman --noconfirm -S efibootmgr
		arch-chroot /mnt bootctl install
		arch-chroot /mnt tee /boot/loader/loader.conf <<-EOF
			default default.conf
			console-mode max
			timeout 0
			auto-entries false
			auto-firmware true
			editor false
		EOF
		arch-chroot /mnt tee /boot/loader/entries/default.conf <<-EOF
			title Arch Linux
			linux /vmlinuz-linux
		EOF
		if [[ -n "${MICROCODE_IMAGE:+SUBSTITUTION}" ]]
			then
				arch-chroot /mnt tee -a /boot/loader/entries/default.conf <<-EOF
					initrd /${MICROCODE_IMAGE}
				EOF
		fi
		arch-chroot /mnt tee -a /boot/loader/entries/default.conf <<-EOF
			initrd /initramfs-linux.img
			options cryptdevice=UUID=${SYSTEM_PARTITION_UUID}:${CRYPT_PARTITION_ID}:allow-discards root=UUID=${CRYPT_PARTITION_UUID} rw quiet
		EOF
	else
		arch-chroot /mnt pacman --noconfirm -S grub
		arch-chroot /mnt tee /etc/default/grub <<-EOF
			GRUB_DISTRIBUTOR="Arch"
			GRUB_DEFAULT=0
			GRUB_TIMEOUT=0
			GRUB_TIMEOUT_STYLE=hidden
			GRUB_DISABLE_RECOVERY=true
			GRUB_CMDLINE_LINUX="cryptdevice=UUID=${SYSTEM_PARTITION_UUID}:${CRYPT_PARTITION_ID}:allow-discards"
			GRUB_CMDLINE_LINUX_DEFAULT="quiet"
		EOF
		arch-chroot /mnt grub-install "${DISK}"
		arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
fi
