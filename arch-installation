#!/bin/bash

sudo /bin/true || exit 1

loadkeys de-latin1-nodeadkeys

ARRAY=()
while IFS= read -r DISK
	do
		ARRAY+=("${DISK}")
		ARRAY+=("")
		if [[ ${#ARRAY[@]} -gt 3 ]]
			then
				ARRAY+=("OFF")
			else
				ARRAY+=("ON")
		fi
done <<< $(sudo parted --list --machine 2> /dev/null | awk 'BEGIN { RS = "\n\n" ; FS = "\n" } { print $2 }' | awk 'BEGIN { FS=":" } { print $1 }' | sort)
[[ ${#ARRAY[@]} -gt 0 ]] || exit 1
LENGTH=$((${#ARRAY[@]} / 3))
HEIGHT=$((${LENGTH} + 7))
DISK=$(whiptail --title "Arch Linux" --radiolist "Installation disk" "${HEIGHT}" 78 "${LENGTH}" "${ARRAY[@]}" 3>&1 1>&2 2>&3)
[[ -z "${DISK}" ]] && exit 1

ARRAY=()
while IFS= read -r NIC
	do
		if [[ -e "/sys/class/net/${NIC}" ]]
			then
				unset ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
				source <(udevadm info --query=property --export "/sys/class/net/${NIC}")
				for NAME in ID_NET_NAME_FROM_DATABASE ID_NET_NAME_ONBOARD ID_NET_NAME_SLOT ID_NET_NAME_PATH ID_NET_NAME_MAC
					do
						eval PROPERTY=\$"${NAME}"
						if [[ -n ${PROPERTY:+SUBSTITUTION} ]]
							then
								ARRAY+=("${PROPERTY}")
								ARRAY+=("")
								if [[ ${#ARRAY[@]} -gt 3 ]]
									then
										ARRAY+=("OFF")
									else
										ARRAY+=("ON")
								fi
								break
						fi
					done
		fi
	done <<< $(ip --brief link show | awk '{ print $1 }' | sort)
[[ ${#ARRAY[@]} -gt 0 ]] || exit 1
LENGTH=$((${#ARRAY[@]} / 3))
HEIGHT=$((${LENGTH} + 7))
NIC=$(whiptail --title "Arch Linux" --radiolist "Network interface" "${HEIGHT}" 78 "${LENGTH}" "${ARRAY[@]}" 3>&1 1>&2 2>&3)
[[ -z "${NIC}" ]] && exit 1

HOSTNAME=$(whiptail --title "Arch Linux" --inputbox "Hostname" 8 78 3>&1 1>&2 2>&3)
[[ -z "${HOSTNAME}" ]] && exit 1

USER=$(whiptail --title "Arch Linux" --inputbox "User" 8 78 3>&1 1>&2 2>&3)
[[ -z "${USER}" ]] && exit 1

PASSWORD=$(whiptail --title "Arch Linux" --passwordbox "Password" 8 78 3>&1 1>&2 2>&3)
[[ -z "${PASSWORD}" ]] && exit 1

set -x

if [[ "${DISK}" = *nvm* ]]
	then
		PARTITION_PREFIX="${DISK}p"
	else
		PARTITION_PREFIX="${DISK}"
fi

if [[ -d /sys/firmware/efi/efivars ]]
	then
		BOOT_MODE="UEFI"
		UEFI_PARTITION="${PARTITION_PREFIX}1"
		BOOT_PARTITION="${PARTITION_PREFIX}2"
		ROOT_PARTITION="${PARTITION_PREFIX}3"
	else
		BOOT_MODE="LEGACY"
		BOOT_PARTITION="${PARTITION_PREFIX}1"
		ROOT_PARTITION="${PARTITION_PREFIX}2"
fi

# pacman -Syy
# pacman -S --noconfirm reflector
# reflector --country DE --protocol https --age 12 --sort rate --save /etc/pacman.d/mirrorlist
cat > /etc/pacman.d/mirrorlist <<-EOF
	Server = https://mirrors.kernel.org/archlinux/\$repo/os/\$arch
	Server = https://mirrors.mit.edu/archlinux/\$repo/os/\$arch
EOF
pacman -Syy

if [[ "${BOOT_MODE}" = UEFI ]]
	then
		parted "${DISK}" mklabel gpt
		parted "${DISK}" mkpart EFI 1MiB 512MiB
		parted "${DISK}" mkpart BOOT 512MiB 1024MiB
		parted "${DISK}" mkpart LINUX 1024MiB 100%
		parted "${DISK}" set 1 esp on
		partprobe "${DISK}"
		mkfs.fat -F32 "${UEFI_PARTITION}"
		mkfs.ext4 "${BOOT_PARTITION}"
	else
		parted "${DISK}" mklabel msdos
		parted "${DISK}" mkpart primary 1MiB 512MiB
		parted "${DISK}" mkpart primary 512MiB 100%
		parted "${DISK}" set 1 boot on
		partprobe "${DISK}"
		mkfs.ext4 "${BOOT_PARTITION}"
fi
cryptsetup --batch-mode luksFormat "${ROOT_PARTITION}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
CRYPT_PARTITION_ID="$(uuidgen)"
cryptsetup open "${ROOT_PARTITION}" "${CRYPT_PARTITION_ID}" <<-EOF
	${PASSWORD}
EOF
mkfs.ext4 "/dev/mapper/${CRYPT_PARTITION_ID}"
mount "/dev/mapper/${CRYPT_PARTITION_ID}" /mnt
mkdir /mnt/boot
mount "${BOOT_PARTITION}" /mnt/boot
if [[ "${BOOT_MODE}" = UEFI ]]
	then
		mkdir /mnt/boot/efi
		mount "${UEFI_PARTITION}" /mnt/boot/efi
fi

PACKAGES=(
	base
	base-devel
	grub
	linux
	linux-firmware
	sudo
	vim
)
if [[ "${BOOT_MODE}" = UEFI ]]
	then
		PACKAGES+=(
			efibootmgr
		)
fi
pacstrap /mnt "${PACKAGES[@]}"
genfstab -U /mnt > /mnt/etc/fstab

sed -i -r s/"#(de_DE.UTF-8 UTF-8)"/"\1"/g /mnt/etc/locale.gen
sed -i -r s/"#(en_US.UTF-8 UTF-8)"/"\1"/g /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
cat > /mnt/etc/locale.conf <<-EOF
	LANG=en_US.UTF-8
EOF
ln -sf /usr/share/zoneinfo/Europe/Berlin /mnt/etc/localtime
cat > /mnt/etc/timezone <<-EOF
	Europe/Berlin
EOF
cat > /mnt/etc/vconsole.conf <<-EOF
	KEYMAP=de-latin1-nodeadkeys
EOF

cat > /mnt/etc/hostname <<-EOF
	${HOSTNAME}
EOF
cat > /mnt/etc/hosts <<-EOF
	127.0.0.1 localhost
	::1 localhost
	127.0.1.1 ${HOSTNAME}
EOF

cat > /mnt/etc/systemd/logind.conf <<-EOF
	[Login]
	HandlePowerKey=ignore
	HandleSuspendKey=ignore
	HandleHibernateKey=ignore
EOF

cat > "/mnt/etc/systemd/network/10-${NIC}.network" <<-EOF
	[Match]
	Name=${NIC}

	[Network]
	DHCP=ipv4

	[DHCP]
	UseDomains=true
EOF
arch-chroot /mnt systemctl enable systemd-networkd.service

cat > /mnt/etc/systemd/timesyncd.conf <<-EOF
	[Time]
	NTP=de.pool.ntp.org
EOF
arch-chroot /mnt systemctl enable systemd-timesyncd.service

ln -sf /var/run/systemd/resolve/stub-resolv.conf /mnt/etc/resolv.conf
arch-chroot /mnt systemctl enable systemd-resolved.service

arch-chroot /mnt systemctl enable fstrim.timer

cat > /mnt/etc/vimrc <<-EOF
	runtime! archlinux.vim
	let skip_defaults_vim=1
	set expandtab
	set ignorecase
	set smartcase
	set shiftwidth=4
	set softtabstop=4
	set tabstop=4
	syntax on
EOF

arch-chroot /mnt useradd -m -s /bin/bash "${USER}"
arch-chroot /mnt passwd "${USER}" <<-EOF
	${PASSWORD}
	${PASSWORD}
EOF
cat > "/mnt/etc/sudoers.d/${USER}" <<-EOF
	${USER} ALL=(ALL) ALL
	${USER} ALL=(ALL) NOPASSWD: /usr/bin/ip
EOF
chmod u=r,g=r,o= "/mnt/etc/sudoers.d/${USER}"
cat > /mnt/etc/sudoers.d/umask <<-EOF
	Defaults umask_override
EOF
chmod u=r,g=r,o= /mnt/etc/sudoers.d/umask
arch-chroot /mnt passwd -l root
ln -s /dev/null /mnt/root/.bash_history

if [[ "${NIC}" = w* ]]
	then
		arch-chroot /mnt pacman -Syu --noconfirm wpa_supplicant
		cat > "/mnt/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf" <<-EOF
			ctrl_interface=/run/wpa_supplicant
			ctrl_interface_group=${USER}
			update_config=1
		EOF
		chmod g-rwx "/mnt/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf"
		chmod o-rwx "/mnt/etc/wpa_supplicant/wpa_supplicant-${NIC}.conf"
		cat > /mnt/usr/local/bin/wpa_cli <<-EOF
			#!/bin/sh

			/usr/bin/wpa_cli -i ${NIC}
		EOF
		chmod +x /mnt/usr/local/bin/wpa_cli
		arch-chroot /mnt systemctl enable "wpa_supplicant@${NIC}.service"
fi

if [[ "$(hostnamectl | awk 'BEGIN { IGNORECASE = 1 } $1 ~ "chassis" { print $2 }')" != vm ]]
	then
		case "$(cat /proc/cpuinfo | awk 'BEGIN { RS="\n\n" ; FS="\n" } { print $2 ; exit }' | awk '{ print $3 }')" in
			"AuthenticAMD")
				arch-chroot /mnt pacman -Syu --noconfirm amd-ucode
				;;
			"GenuineIntel")
				arch-chroot /mnt pacman -Syu --noconfirm intel-ucode
				;;
		esac
fi

cat > /mnt/etc/mkinitcpio.conf <<-EOF
	MODULES=()
	BINARIES=()
	FILES=()
	HOOKS=(base udev autodetect modconf block keyboard keymap encrypt filesystems fsck)
EOF
arch-chroot /mnt mkinitcpio -p linux

for ENTRY in $(ls /dev/disk/by-uuid)
	do
		if [[ "$(readlink -f "/dev/disk/by-uuid/${ENTRY}")" = "${ROOT_PARTITION}" ]]
			then
				ROOT_PARTITION_BY_UUID="/dev/disk/by-uuid/${ENTRY}"
				break
		fi
	done
cat > /mnt/etc/default/grub <<-EOF
	GRUB_DISTRIBUTOR="Arch"
	GRUB_DEFAULT=0
	GRUB_TIMEOUT=0
	GRUB_TIMEOUT_STYLE=hidden
	GRUB_DISABLE_RECOVERY=true
	GRUB_CMDLINE_LINUX="cryptdevice=${ROOT_PARTITION_BY_UUID}:${CRYPT_PARTITION_ID}:allow-discards"
	GRUB_CMDLINE_LINUX_DEFAULT="quiet loglevel=3"
EOF
if [[ "${BOOT_MODE}" = UEFI ]]
	then
		arch-chroot /mnt grub-install --target=x86_64-efi --bootloader-id=GRUB --efi-directory=/boot/efi
	else
		arch-chroot /mnt grub-install "${DISK}"
fi
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
