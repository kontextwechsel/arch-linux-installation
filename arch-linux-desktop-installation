#!/bin/bash

# Installation script for i3 desktop environment.

# TODO: Check return values (https://google.github.io/styleguide/shellguide.html#s8.1-checking-return-values)!

if ! sudo true; then
  exit 1
fi

readonly -A COLORS=(
  ["Gray A"]="#282828"
  ["Gray B"]="#464646"
  ["Gray C"]="#6f6f6f"
  ["Pink"]="#f92472"
  ["Green"]="#a6e22c"
  ["Yellow"]="#ffe894"
  ["Blue"]="#67d8ef"
  ["Purple"]="#ac80ff"
  ["Teal"]="#2aa198"
  ["White"]="#f7f7f7"
)

if whiptail --title "${TITLE}" --yesno "Enable logging?" "${DEFAULT_HEIGHT}" "${DEFAULT_WIDTH}" --defaultno 3>&1 1>&2 2>&3; then
  exec &> >(tee --append "${BASH_SOURCE[0]}.log")
fi

set -x

sudo tee /etc/pacman.d/conf/noto-fonts <<- EOF
	NoExtract = usr/share/fonts/noto/Noto*.ttf
	NoExtract = !usr/share/fonts/noto/NotoColorEmoji.ttf
	NoExtract = !usr/share/fonts/noto/NotoSans-*.ttf
	NoExtract = !usr/share/fonts/noto/NotoSansMono-*.ttf
	NoExtract = !usr/share/fonts/noto/NotoSansSymbols
	NoExtract = !usr/share/fonts/noto/NotoSansSymbols-*.ttf
	NoExtract = !usr/share/fonts/noto/NotoSerif-*.ttf
EOF

sudo mkdir --parents /etc/pacman.d/hooks/
sudo tee /etc/pacman.d/hooks/slock.hook <<- EOF
	[Trigger]
	Type = Package
	Operation = Install
	Operation = Upgrade
	Target = slock

	[Action]
	When = PostTransaction
	Exec = /usr/bin/perl -i -p -e "s/#CC3333/${COLORS["Gray C"]^^}/g;" -e "s/#005577/${COLORS["Green"]^^}/g;" /usr/bin/slock
EOF

packages=(
  dmenu
  dunst
  feh
  flatpak
  gvfs
  gvfs-mtp
  gvfs-nfs
  gvfs-smb
  i3-wm
  i3status
  libnotify
  numlockx
  pipewire
  pipewire-pulse
  polkit
  scrot
  slock
  wireplumber
  xclip
  xcursor-vanilla-dmz
  xdg-desktop-portal # Flatpak dependency
  xdg-desktop-portal-gtk # Flatpak dependency
  xorg-server
  xorg-xinit
  xorg-xrandr
  xorg-xsetroot
  xss-lock
  xterm
)
packages+=(
  alacritty
  firefox
  gimp
  gpicview
  leafpad
  libreoffice-fresh
  mpv
  pavucontrol
  pcmanfm
  thunderbird
)
packages+=(
  adobe-source-code-pro-fonts
  adobe-source-sans-pro-fonts
  adobe-source-serif-pro-fonts
  noto-fonts
  noto-fonts-emoji
  ttf-liberation
)
packages+=(
  bc
  bind
  curl
  dmidecode
  fwupd
  git
  htop
  lsof
  nmap
  openssl
  p7zip
  pass
  pciutils
  pwgen
  python
  rsync
  smartmontools
  tcpdump
  testdisk
  unrar
  unzip
  usbutils
  wget
  zip
)
readonly packages

sudo pacman --noconfirm --sync --refresh "${packages[@]}"

readonly arc_theme_version="20221218"
readonly arc_theme_directory="$(mktemp -d)"
sudo pacman --noconfirm --sync gnome-themes-extra gtk-engine-murrine meson sassc
wget --directory-prefix "${arc_theme_directory}/" "https://github.com/jnsh/arc-theme/releases/download/${arc_theme_version}/arc-theme-${arc_theme_version}.tar.xz"
tar --extract --file "${arc_theme_directory}/arc-theme-${arc_theme_version}.tar.xz" --directory "${arc_theme_directory}/"
meson setup --prefix="${arc_theme_directory}/arc-theme-${arc_theme_version}/install/" -Dthemes=gtk2,gtk3,gtk4 -Dvariants=lighter -Dtransparency=false "${arc_theme_directory}/arc-theme-${arc_theme_version}/build/" "${arc_theme_directory}/arc-theme-${arc_theme_version}/"
meson install -C "${arc_theme_directory}/arc-theme-${arc_theme_version}/build/"
sudo cp --recursive "${arc_theme_directory}/arc-theme-${arc_theme_version}/install/share/themes/Arc-Lighter-solid/" /usr/share/themes/Arc/
sudo sed --in-place "s/Arc-Lighter-solid/Arc/g" /usr/share/themes/Arc/index.theme
sudo chmod --recursive u=rwX,go=rX /usr/share/themes/Arc/
sudo pacman --noconfirm --remove meson sassc
rm --recursive "${arc_theme_directory:?}/"

readonly arc_icon_theme_version="20161122"
readonly arc_icon_theme_directory="$(mktemp -d)"
wget --directory-prefix "${arc_icon_theme_directory}/" "https://github.com/horst3180/arc-icon-theme/archive/refs/tags/${arc_icon_theme_version}.zip"
unzip -q "${arc_icon_theme_directory}/${arc_icon_theme_version}.zip" -d "${arc_icon_theme_directory}/"
sudo cp --recursive "${arc_icon_theme_directory}/arc-icon-theme-${arc_icon_theme_version}/Arc/" /usr/share/icons/
sudo mkdir --parents /usr/share/icons/Arc/symbolic/legacy/
sudo ln --symbolic /usr/share/icons/Arc/categories/symbolic/applications-system-symbolic.svg /usr/share/icons/Arc/symbolic/legacy/gtk-preferences.svg
sudo chmod --recursive u=rwX,go=rX /usr/share/icons/Arc/
rm --recursive "${arc_icon_theme_directory:?}/"

sudo mkdir --parents /usr/local/bin/
sudo tee /usr/local/bin/application-launcher <<- EOF
	#!/bin/bash

	if [[ -n "\${DISPLAY}" ]]; then
	  readonly file="\${HOME}/.config/application-launcher/config"

	  declare -A applications
	  if [[ -f "\${file}" ]]; then
	    while IFS="=" read -r application executable; do
	      applications["\${application}"]="\${executable}"
	    done < "\${file}"
	  fi

	  function print() {
	    case "\$1" in
	      -k | --keys)
	        printf "%s\n" "\${!applications[@]}" | sort
	        ;;
	      *)
	        for application in "\${!applications[@]}"; do
	          printf "%s=%s\n" "\${application}" "\${applications[\${application}]}"
	        done | sort
	        ;;
	    esac
	  }

	  if [[ "\$#" -gt 0 ]]; then
	    case "\$1" in
	      -a | --add)
	        if [[ ! "\$2" =~ ^[a-z0-9\ -._]+\$ ]]; then
	          printf "Invalid application\n"
	          exit 1
	        fi
	        if [[ ! -f "\$3" || ! -x "\$3" ]]; then
	          printf "Invalid executable\n"
	          exit 1
	        fi
	        readonly executable="\$(realpath --no-symlinks "\$3")"
	        readonly args="\${*:4}"
	        if [[ -z "\${args}" ]]; then
	            applications["\$2"]="\${executable/#\${HOME}/~}"
	        else
	            applications["\$2"]="\${executable/#\${HOME}/~} \${*:4}"
	        fi
	        print > "\${file}"
	        ;;
	      -r | --remove)
	        if [[ -z "\${applications["\$2"]+application}" ]]; then
	          printf "Unknown application\n"
	          exit 1
	        fi
	        unset applications["\$2"]
	        print > "\${file}"
	        ;;
	      -l | --list)
	        print | column --table --separator "="
	        ;;
	      *)
	        printf "Usage: %s [--add|--remove|--list] [APPLICATION] [EXECUTABLE] [ARGUMENTS...]\n" "\$(basename \${BASH_SOURCE[0]})"
	        exit 1
	        ;;
	    esac
	  else
	    readonly selection="\$(dmenu -i -sb "${COLORS["Gray C"]}" <<< "\$(print --keys)")"
	    if [[ -n "\${selection}" ]]; then
	      i3-msg "exec --no-startup-id \${applications[\${selection}]}"
	    fi
	  fi
	fi
EOF
sudo tee /usr/local/bin/display-configuration <<- EOF
	#!/bin/bash

	if [[ -n "\${DISPLAY}" ]]; then
	  readonly file="\${HOME}/.config/display-configuration/xrandr"

	  if [[ -f "\${file}" ]]; then
	    source "\${file}"
	  else
	    while IFS= read -r screen; do
	      xrandr --output "\${screen}" --auto
	    done < <(xrandr | awk '\$2 == "connected" { print \$1 }')
	  fi

	  if feh --loadable "\${HOME}/.local/share/backgrounds/" > /dev/null 2>&1; then
	    feh --bg-fill --no-fehbg --randomize "\${HOME}/.local/share/backgrounds/"
	  else
	    xsetroot -grey
	  fi
	fi
EOF
sudo tee /usr/local/bin/screenshot <<- EOF
	#!/bin/bash

	if [[ -n "\${DISPLAY}" ]]; then
	  filename="%Y-%m-%d-%H-%M-%S.png"

	  args=("--overwrite")
	  while [[ "\$#" -gt 0 ]]; do
	    case "\$1" in
	      -s | --select)
	        args+=("--select")
	        shift
	        ;;
	      -c | --clipboard)
	        filename="\$(mktemp --suffix=".png")"
	        trap "{ xclip -selection clipboard -target image/png -in \${filename}; rm -rf \${filename}; }" EXIT
	        shift
	        ;;
	      *)
	        printf "Usage: %s [-s|--select] [-c|--clipboard]\n" "\$(basename \${BASH_SOURCE[0]})"
	        exit 1
	        ;;
	    esac
	  done
	  readonly filename args

	  scrot "\${args[@]}" "\${filename}"
	fi
EOF

sudo chmod +x /usr/local/bin/application-launcher
sudo chmod +x /usr/local/bin/display-configuration
sudo chmod +x /usr/local/bin/screenshot

sudo mkdir --parents /usr/local/share/bash-completion/completions/
sudo tee /usr/local/share/bash-completion/completions/application-launcher <<-EOF
	function _application-launcher() {
	  if [[ "\${COMP_CWORD}" -eq 1 ]]; then
	    for option in \$(compgen -W "--add --remove --list" -- "\${COMP_WORDS["\${COMP_CWORD}"]}"); do
	      COMPREPLY+=("\${option} ")
	    done
	  else
	    if [[ "\${COMP_WORDS[1]}" == "--add" ]]; then
	      if [[ "\${COMP_CWORD}" -eq 2 ]]; then
	        if [[ -n "\${COMP_WORDS[2]}" ]]; then
	          COMPREPLY=("\${COMP_WORDS[2]} ")
	        fi
	      elif [[ "\${COMP_CWORD}" -eq 3 ]]; then
	        for file in \$(compgen -f -- "\${COMP_WORDS["\${COMP_CWORD}"]}"); do
	          if [[ -d "\${file}" ]]; then
	            COMPREPLY+=("\${file}/")
	          elif [[ -x "\${file}" ]]; then
	            COMPREPLY+=("\${file} ")
	          fi
	        done
	      else
	        if [[ -n "\${COMP_WORDS["\${COMP_CWORD}"]}" ]]; then
	          COMPREPLY=("\${COMP_WORDS["\${COMP_CWORD}"]} ")
	        fi
	      fi
	    elif [[ "\${COMP_WORDS[1]}" == "--remove" ]]; then
	      if [[ "\${COMP_CWORD}" -eq 2 ]]; then
	        for application in \$(compgen -W "\$(application-launcher --list | awk '{ print \$1 }')" -- "\${COMP_WORDS["\${COMP_CWORD}"]}"); do
	          COMPREPLY+=("\${application} ")
	        done
	      fi
	    fi
	  fi
	}
	complete -o nospace -F _application-launcher application-launcher
EOF
sudo tee /usr/local/share/bash-completion/completions/display-configuration <<-EOF
	complete display-configuration
EOF
sudo tee /usr/local/share/bash-completion/completions/screenshot <<-EOF
	function _screenshot() {
	  readarray -t COMPREPLY < <(compgen -W "--clipboard --select" -- "\${COMP_WORDS["\${COMP_CWORD}"]}")
	}
	complete -F _screenshot screenshot
EOF

sudo tee /usr/share/X11/xkb/symbols/default <<-EOF
	default partial alphanumeric_keys
	xkb_symbols "us" {
	    include "us(basic)"
	    include "level3(ralt_switch)"
	    key <AC01> {[ a, A, adiaeresis, Adiaeresis ]};
	    key <AC02> {[ s, S, ssharp ]};
	    key <AD03> {[ e, E, EuroSign ]};
	    key <AD07> {[ u, U, udiaeresis, Udiaeresis ]};
	    key <AD09> {[ o, O, odiaeresis, Odiaeresis ]};
	    include "default(arrow)"
	};

	partial alphanumeric_keys
	xkb_symbols "de" {
	    include "de(nodeadkeys)"
	    include "kpdl(dot)"
	    include "default(arrow)"
	};

	partial
	xkb_symbols "arrow" {
	    key <LEFT> {[ Left, Left, U2190 ]};
	    key <UP> {[ Up, Up, U2191 ]};
	    key <RGHT> {[ Right, Right, U2192 ]};
	    key <DOWN> {[ Down, Down, U2193 ]};
	};
EOF
if [[ "$(basename "$(awk --field-separator "=" '$1 == "KEYMAP" { print $2 }' /etc/vconsole.conf)" ".map")" == "us" ]]; then
  variants="us,de"
else
  variants="de,us"
fi
readonly variants
sudo tee /etc/X11/xorg.conf.d/10-keyboard.conf <<- EOF
	Section "InputClass"
	        Identifier "Keyboard configuration"
	        MatchIsKeyboard "on"
	        Option "XkbLayout" "default,default"
	        Option "XkbVariant" "${variants}"
	        Option "XkbOptions" "caps:escape_shifted_capslock,grp:rctrl_rshift_toggle"
	EndSection
EOF
sudo tee /etc/X11/xorg.conf.d/90-default.conf <<- EOF
	Section "ServerFlags"
	        Option "DontVTSwitch"
	        Option "DontZap"
	EndSection

	Section "ServerLayout"
	        Identifier "Display control"
	        Option "StandbyTime" "0"
	        Option "SuspendTime" "0"
	        Option "OffTime" "10"
	        Option "BlankTime" "5"
	EndSection
EOF

sudo mkdir --parents /usr/share/icons/default/
sudo tee /usr/share/icons/default/index.theme <<- EOF
	[Icon Theme]
	Inherits=Vanilla-DMZ
EOF

readarray -t icons < <(find /usr/share/icons/Arc/ -type f -name applications-system.png -o -name applications-system-symbolic.svg)
for icon in "${icons[@]}"; do
    sudo ln --symbolic --force --relative "${icon}" "${icon/applications-system/gtk-preferences}"
done
sudo gtk-update-icon-cache --force /usr/share/icons/Arc/

sudo mkdir --parents /etc/gtk-2.0/
sudo tee /etc/gtk-2.0/gtkrc <<- EOF
	gtk-theme-name = "Arc-Lighter"
	gtk-icon-theme-name = "Arc"
	gtk-cursor-theme-name = "Vanilla-DMZ"
	gtk-font-name = "Source Sans 3 12"
EOF

sudo mkdir --parents /etc/gtk-{3,4}.0/
sudo tee /etc/gtk-{3,4}.0/settings.ini <<- EOF
	[Settings]
	gtk-theme-name = Arc-Lighter
	gtk-icon-theme-name = Arc
	gtk-cursor-theme-name = Vanilla-DMZ
	gtk-font-name = Source Sans 3 12
	gtk-decoration-layout = menu:
EOF

sudo mkdir --parents /etc/xdg/
sudo tee /etc/xdg/mimeapps.list <<- EOF
	[Default Applications]
	application/javascript=leafpad.desktop
	application/json=leafpad.desktop
	application/sql=leafpad.desktop
	application/pdf=firefox.desktop
	application/xml=leafpad.desktop
	application/x-shellscript=leafpad.desktop
	image/bmp=gpicview.desktop
	image/gif=gpicview.desktop
	image/jpeg=gpicview.desktop
	image/png=gpicview.desktop
	image/tiff=gpicview.desktop
	image/svg+xml=gpicview.desktop
	text/css=leafpad.desktop
	text/csv=leafpad.desktop
	text/html=leafpad.desktop
	text/markdown=leafpad.desktop
	text/plain=leafpad.desktop
	text/x-c=leafpad.desktop
	text/x-c++=leafpad.desktop
	text/x-java=leafpad.desktop
	text/x-python=leafpad.desktop
	x-scheme-handler/http=firefox.desktop
	x-scheme-handler/https=firefox.desktop
	x-scheme-handler/about=firefox.desktop
	x-scheme-handler/unknown=firefox.desktop
EOF

mkdir --parents "${HOME}/.config/application-launcher/"
tee "${HOME}/.config/application-launcher/config" <<- EOF
	alacritty=/usr/bin/alacritty
	firefox=/usr/bin/firefox
	gimp=/usr/bin/gimp
	gpicview=/usr/bin/gpicview
	leafpad=/usr/bin/leafpad
	libreoffice=/usr/bin/libreoffice
	pavucontrol=/usr/bin/pavucontrol
	pcmanfm=/usr/bin/pcmanfm
	thunderbird=/usr/bin/thunderbird
EOF

tee "${HOME}/.xinitrc" <<- EOF
	dbus-update-activation-environment --systemd DBUS_SESSION_BUS_ADDRESS DISPLAY XAUTHORITY
	xrdb -merge "\${HOME}/.Xresources"
	mkdir --parents "/run/user/\${UID}/i3/"
	mkdir --parents "/run/user/\${UID}/i3status/"
	awk 'NR != 1 && FNR == 1 { printf "\n" } { print }' "\${HOME}/.config/i3.d/"* > "/run/user/\${UID}/i3/config"
	awk 'NR != 1 && FNR == 1 { printf "\n" } { print }' "\${HOME}/.config/i3status.d/"* > "/run/user/\${UID}/i3status/config"
	exec /usr/bin/i3 -c "/run/user/\${UID}/i3/config" > /dev/null 2>&1
EOF

tee "${HOME}/.Xauthority" <<- EOF
EOF

tee "${HOME}/.Xresources" <<- EOF
	Xft.dpi: 96
	XTerm.termName: xterm-256color
	XTerm.title: Terminal
	XTerm.VT100.faceName: Source Code Pro
	XTerm.VT100.faceSize: 16
	XTerm.VT100.allowBoldFonts: false
	XTerm.VT100.background: ${COLORS["Gray A"]}
	XTerm.VT100.foreground: ${COLORS["White"]}
	XTerm.VT100.color0: ${COLORS["Gray C"]}
	XTerm.VT100.color1: ${COLORS["Pink"]}
	XTerm.VT100.color2: ${COLORS["Green"]}
	XTerm.VT100.color3: ${COLORS["Yellow"]}
	XTerm.VT100.color4: ${COLORS["Blue"]}
	XTerm.VT100.color5: ${COLORS["Purple"]}
	XTerm.VT100.color6: ${COLORS["Teal"]}
	XTerm.VT100.color7: ${COLORS["White"]}
	XTerm.VT100.color8: ${COLORS["Gray C"]}
	XTerm.VT100.color9: ${COLORS["Pink"]}
	XTerm.VT100.color10: ${COLORS["Green"]}
	XTerm.VT100.color11: ${COLORS["Yellow"]}
	XTerm.VT100.color12: ${COLORS["Blue"]}
	XTerm.VT100.color13: ${COLORS["Purple"]}
	XTerm.VT100.color14: ${COLORS["Teal"]}
	XTerm.VT100.color15: ${COLORS["White"]}
	XTerm.VT100.alternateScroll: true
	XTerm.VT100.fastScroll: true
	XTerm.VT100.jumpScroll: true
	XTerm.VT100.multiScroll: true
	XTerm.VT100.on2Clicks: regex (https?:)?[a-zA-Z0-9$%&/()?@~*+#,._-]+
	XTerm.VT100.on3Clicks: line
	XTerm.VT100.saveLines: 16384
	XTerm.VT100.translations: #override \n\\
	    Shift Ctrl <Key> c: copy-selection(CLIPBOARD) \n\\
	    Shift Ctrl <Key> v: insert-selection(CLIPBOARD)
EOF

mkdir --parents "${HOME}/.gnupg/"
tee "${HOME}/.gnupg/gpg-agent.conf" <<- EOF
	pinentry-program /usr/bin/pinentry-curses
EOF

tee "${HOME}/.bash_profile" <<- EOF
	umask g-rwx,o-rwx
	if [[ -n "\${BASH_VERSION}" && -f "\${HOME}/.bashrc" ]]; then
	  source "\${HOME}/.bashrc"
	fi
	if [[ -d "\${HOME}/.local/bin" ]]; then
	  PATH="\${HOME}/.local/bin:\${PATH}"
	fi
	if [[ -z "\${DISPLAY}" && "\${XDG_VTNR}" -eq 1 ]]; then
	  exec startx
	fi
EOF

tee "${HOME}/.bashrc" <<- EOF
	if [[ "\$-" == *i* ]]; then
	  if [[ -z "\${SSH_CLIENT:+substitution}" ]]; then
	    PS1="\[\e[32m\]\u@\h\[\e[m\]:\[\e[34m\]\w\[\e[m\]\\\$ "
	  else
	    PS1="\[\e[31m\]\u@\h\[\e[m\]:\[\e[34m\]\w\[\e[m\]\\\$ "
	  fi

	  export EDITOR="vim"
	  export PAGER="less"
	  export SYSTEMD_PAGER="cat"

	  alias sudo="sudo --preserve-env=EDITOR,PAGER,SYSTEMD_PAGER"

	  HISTCONTROL="ignoreboth"
	  HISTFILE="\${HOME}/.bash_history"
	  HISTFILESIZE="-1"
	  HISTSIZE="-1"
	  HISTTIMEFORMAT="%Y-%m-%d %H:%M:%S "

	  shopt -s autocd
	  shopt -s checkwinsize
	  shopt -s globstar
	  shopt -s histappend
	  tabs 4

	  eval "\$(dircolors -b)"

	  pgrep -u "\${USER}" ssh-agent > /dev/null
	  if [[ "\$?" -ne 0 ]]; then
	    ssh-agent -s > "\${HOME}/.sshrc"
	  fi
	  source "\${HOME}/.sshrc" > /dev/null

	  alias diff="/usr/bin/diff --color=auto"
	  alias grep="/usr/bin/grep --color=auto"
	  alias ip="/usr/bin/ip -color=auto"
	  alias less="/usr/bin/less --ignore-case"
	  alias ls="/usr/bin/ls --color=auto --group-directories-first"

	  alias bc="/usr/bin/bc --mathlib"
	  alias cal="/usr/bin/cal --months 9 --span"

	  for command in poweroff reboot suspend hibernate; do
	    alias "\${command}"="/usr/bin/systemctl \${command}"
	  done

	  function toggle_history() {
	    if [[ -z "\${HISTFILE:+substitution}" ]]; then
	      HISTFILE="\${HOME}/.bash_history"
	      printf "\e[30mHistory enabled\e[0m\n"
	    else
	      unset HISTFILE
	      printf "\e[30mHistory disabled\e[0m\n"
	    fi
	  }
	  bind -x '"\eh": toggle_history'

	  function prettify_git() {
	    args=("\$@")
	    case "\$1" in
	      log)
	        /usr/bin/git --no-pager log --reverse "\${args[@]:1}"
	        ;;
	      graph)
	        /usr/bin/git --no-pager log --graph --color=always "\${args[@]:1}" | less --RAW-CONTROL-CHARS
	        ;;
	      *)
	        /usr/bin/git --no-pager "\${args[@]}"
	        ;;
	    esac
	  }
	  alias git="prettify_git"

	  if [[ -f "\${HOME}/.bash_aliases" ]]; then
	    source "\${HOME}/.bash_aliases"
	  fi

	  if [[ -d "\${HOME}/.bash_scripts/" ]]; then
	    while IFS= read -r file; do
	      alias "\$(basename "\${file}")"="\${file}"
	    done < <(find "\${HOME}/.bash_scripts/" -maxdepth 1 -type f -executable)
	  fi
	fi
EOF

tee "${HOME}/.bash_logout" <<- EOF
EOF

tee "${HOME}/.hushlogin" <<- EOF
EOF

mkdir --parents "${HOME}/.config/i3.d/"
tee "${HOME}/.config/i3.d/10-default" <<- EOF
	set \$mod Mod4
	floating_modifier \$mod

	font pango:Source Code Pro 10
	client.focused ${COLORS["Gray B"]} ${COLORS["Gray B"]} ${COLORS["White"]} ${COLORS["Gray C"]}
	client.focused_inactive ${COLORS["Gray B"]} ${COLORS["Gray B"]} ${COLORS["Gray C"]} ${COLORS["White"]}
	client.unfocused ${COLORS["Gray B"]} ${COLORS["Gray B"]} ${COLORS["Gray C"]} ${COLORS["White"]}
	client.urgent ${COLORS["Gray B"]} ${COLORS["Pink"]} ${COLORS["White"]} ${COLORS["Pink"]}

	bindsym \$mod+Return exec --no-startup-id alacritty
	bindsym \$mod+Shift+q kill
	bindsym \$mod+d exec --no-startup-id application-launcher

	bindsym \$mod+Left focus left
	bindsym \$mod+Down focus down
	bindsym \$mod+Up focus up
	bindsym \$mod+Right focus right
	bindsym \$mod+Shift+Left move left
	bindsym \$mod+Shift+Down move down
	bindsym \$mod+Shift+Up move up
	bindsym \$mod+Shift+Right move right
	bindsym \$mod+Shift+n move workspace to output left
	bindsym \$mod+Shift+m move workspace to output right

	bindsym \$mod+h split h
	bindsym \$mod+v split v
	bindsym \$mod+f fullscreen
	bindsym \$mod+s layout stacking
	bindsym \$mod+w layout tabbed
	bindsym \$mod+e layout toggle split
	bindsym \$mod+Shift+space floating toggle
	bindsym \$mod+space focus mode_toggle
	bindsym \$mod+a focus parent
	bindsym \$mod+c focus child

	bindsym \$mod+1 workspace 1
	bindsym \$mod+2 workspace 2
	bindsym \$mod+3 workspace 3
	bindsym \$mod+4 workspace 4
	bindsym \$mod+5 workspace 5
	bindsym \$mod+6 workspace 6
	bindsym \$mod+7 workspace 7
	bindsym \$mod+8 workspace 8
	bindsym \$mod+9 workspace 9
	bindsym \$mod+0 workspace 10:X
	bindsym \$mod+F1 workspace 11:F1
	bindsym \$mod+F2 workspace 12:F2
	bindsym \$mod+F3 workspace 13:F3
	bindsym \$mod+F4 workspace 14:F4
	bindsym \$mod+F5 workspace 15:F5
	bindsym \$mod+F6 workspace 16:F6
	bindsym \$mod+F7 workspace 17:F7
	bindsym \$mod+F8 workspace 18:F8
	bindsym \$mod+F9 workspace 19:F9
	bindsym \$mod+F10 workspace 20:F10
	bindsym \$mod+F11 workspace 21:F11
	bindsym \$mod+F12 workspace 22:F12
	bindsym \$mod+Shift+1 move container to workspace 1
	bindsym \$mod+Shift+2 move container to workspace 2
	bindsym \$mod+Shift+3 move container to workspace 3
	bindsym \$mod+Shift+4 move container to workspace 4
	bindsym \$mod+Shift+5 move container to workspace 5
	bindsym \$mod+Shift+6 move container to workspace 6
	bindsym \$mod+Shift+7 move container to workspace 7
	bindsym \$mod+Shift+8 move container to workspace 8
	bindsym \$mod+Shift+9 move container to workspace 9
	bindsym \$mod+Shift+0 move container to workspace 10:X
	bindsym \$mod+Shift+F1 move container to workspace 11:F1
	bindsym \$mod+Shift+F2 move container to workspace 12:F2
	bindsym \$mod+Shift+F3 move container to workspace 13:F3
	bindsym \$mod+Shift+F4 move container to workspace 14:F4
	bindsym \$mod+Shift+F5 move container to workspace 15:F5
	bindsym \$mod+Shift+F6 move container to workspace 16:F6
	bindsym \$mod+Shift+F7 move container to workspace 17:F7
	bindsym \$mod+Shift+F8 move container to workspace 18:F8
	bindsym \$mod+Shift+F9 move container to workspace 19:F9
	bindsym \$mod+Shift+F10 move container to workspace 20:F10
	bindsym \$mod+Shift+F11 move container to workspace 21:F11
	bindsym \$mod+Shift+F12 move container to workspace 22:F12

	set \$exit i3 [e]xit [r]estart
	bindsym \$mod+Shift+e mode "\$exit"
	mode "\$exit" {
	    bindsym e exec i3-msg exit; mode default
	    bindsym r exec i3-msg restart; mode default
	    bindsym Escape mode default
	}

	set \$resize Resize
	bindsym \$mod+r mode "\$resize"
	mode "\$resize" {
	    bindsym Left resize shrink width 10 px or 10 ppt
	    bindsym Down resize grow height 10 px or 10 ppt
	    bindsym Up resize shrink height 10 px or 10 ppt
	    bindsym Right resize grow width 10 px or 10 ppt
	    bindsym Return mode default
	    bindsym Escape mode default
	}
EOF
tee "${HOME}/.config/i3.d/20-display" <<- EOF
	exec --no-startup-id display-configuration
	bindsym \$mod+Shift+d exec --no-startup-id display-configuration
EOF
tee "${HOME}/.config/i3.d/30-status" <<- EOF
	bar {
	    status_command i3status -c "/run/user/\${UID}/i3status/config"
	    position bottom
	    strip_workspace_numbers yes

	    colors {
	        background ${COLORS["Gray B"]}
	        statusline ${COLORS["White"]}
	        separator ${COLORS["Gray C"]}
	        focused_workspace ${COLORS["White"]} ${COLORS["Gray C"]} ${COLORS["White"]}
	        active_workspace ${COLORS["White"]} ${COLORS["Gray C"]} ${COLORS["White"]}
	        inactive_workspace ${COLORS["Gray C"]} ${COLORS["Gray B"]} ${COLORS["White"]}
	        urgent_workspace ${COLORS["Gray C"]} ${COLORS["Pink"]} ${COLORS["White"]}
	    }
	}
EOF
tee "${HOME}/.config/i3.d/40-volume" <<- EOF
	bindsym XF86AudioLowerVolume exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%-
	bindcode \$mod+59 exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%-
	bindcode \$mod+Shift+59 exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 10%-
	bindsym XF86AudioRaiseVolume exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%+
	bindcode \$mod+60 exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 1%+
	bindcode \$mod+Shift+60 exec --no-startup-id wpctl set-volume @DEFAULT_AUDIO_SINK@ 10%+
	bindsym XF86AudioMute exec --no-startup-id wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
	bindcode \$mod+61 exec --no-startup-id wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
EOF
tee "${HOME}/.config/i3.d/60-slock" <<- EOF
	exec --no-startup-id xss-lock slock
	bindsym --release \$mod+l exec --no-startup-id loginctl lock-session
EOF
tee "${HOME}/.config/i3.d/61-numlockx" <<- EOF
	exec --no-startup-id numlockx on
EOF
tee "${HOME}/.config/i3.d/62-screenshot" <<- EOF
	bindsym Print exec --no-startup-id screenshot
	bindsym --release Shift+Print exec --no-startup-id screenshot --select --clipboard
EOF
tee "${HOME}/.config/i3.d/63-dunst" <<- EOF
	exec --no-startup-id dunst
	bindsym \$mod+j exec --no-startup-id dunstctl history-pop
EOF

mkdir --parents "${HOME}/.config/i3status.d/"
tee "${HOME}/.config/i3status.d/10-default" <<- EOF
	general {
	    colors = true
	    color_good = "${COLORS["Green"]}"
	    color_degraded = "${COLORS["Gray C"]}"
	    color_bad = "${COLORS["Pink"]}"
	    interval = 5
	}
EOF
tee "${HOME}/.config/i3status.d/20-volume" <<- EOF
	order += "volume pulse"
	volume pulse {
	    format = "🔊 %volume"
	    format_muted = "🔈"
	    device = "pulse"
	}
EOF
tee "${HOME}/.config/i3status.d/30-disk" <<- EOF
	order += "disk /"
	disk / {
	    format = "%free"
	}
EOF
readonly interface="$(ip -brief link show | awk '$2 == "UP" { print $1; exit }')"
if [[ "${interface}" == w* ]]; then
  tee "${HOME}/.config/i3status.d/60-wlan" <<- EOF
		order += "wireless ${interface}"
		wireless ${interface} {
		    format_up = "%essid"
		    format_down = "—"
		}
	EOF
else
  tee "${HOME}/.config/i3status.d/70-ethernet" <<- EOF
		order += "ethernet ${interface}"
		ethernet ${interface} {
		    format_up = "%ip"
		    format_down = "—"
		}
	EOF
fi
tee "${HOME}/.config/i3status.d/90-time" <<- EOF
	order += "tztime local"
	tztime local {
	    format = "%Y-%m-%d %H:%M"
	}
EOF

mkdir --parents "${HOME}/.config/dunst/"
tee "${HOME}/.config/dunst/dunstrc" <<- EOF
	[global]
	    width = 300
	    height = 100
	    notification_limit = 1
	    origin = "bottom-right"
	    offset = 10x36
	    progress_bar = false
	    padding = 10
	    horizontal_padding = 10
	    frame_width = 1
	    font = "Source Code Pro 10"
	    line_height = 3
	    format = "<b>%s</b>\n%b"
	    word_wrap = true
	    show_indicators = false

	[urgency_low]
	    background = "${COLORS["Gray B"]}"
	    foreground = "${COLORS["White"]}"
	    frame_color = "${COLORS["Gray C"]}"
	    timeout = 3

	[urgency_normal]
	    background = "${COLORS["Gray B"]}"
	    foreground = "${COLORS["White"]}"
	    frame_color = "${COLORS["Gray C"]}"
	    timeout = 10

	[urgency_critical]
	    background = "${COLORS["Gray B"]}"
	    foreground = "${COLORS["White"]}"
	    frame_color = "${COLORS["Gray C"]}"
	    timeout = 0
EOF

mkdir --parents "${HOME}/.config/alacritty/"
tee "${HOME}/.config/alacritty/alacritty.toml" <<- EOF
[general]
import = [
  "~/.config/alacritty/colors.toml",
  "~/.config/alacritty/hints.toml"
]
live_config_reload = false

[env]
TERM = "xterm-256color"

[window]
title = "Terminal"

[scrolling]
history = 16384
multiplier = 8

[font]
size = 16.0

[font.normal]
family = "Source Code Pro"
style = "Regular"

[font.bold]
style = "Regular"

[font.italic]
style = "Regular"

[font.bold_italic]
style = "Regular"

[selection]
save_to_clipboard = false

[cursor.style]
blinking = "Always"
EOF
tee "${HOME}/.config/alacritty/colors.toml" <<- EOF
[colors.primary]
foreground = "${COLORS["White"]}"
background = "${COLORS["Gray A"]}"

[colors.search.matches]
foreground = "${COLORS["Gray A"]}"
background = "${COLORS["White"]}"

[colors.search.focused_match]
foreground = "${COLORS["White"]}"
background = "${COLORS["Teal"]}"

[colors.hints.start]
background = "${COLORS["Teal"]}"
foreground = "${COLORS["White"]}"

[colors.hints.end]
background = "${COLORS["White"]}"
foreground = "${COLORS["Teal"]}"

[colors.footer_bar]
background = "${COLORS["White"]}"
foreground = "${COLORS["Gray A"]}"

[colors.selection]
background = "${COLORS["White"]}"
text = "${COLORS["Gray A"]}"

[colors.normal]
black = "${COLORS["Gray C"]}"
blue = "${COLORS["Blue"]}"
cyan = "${COLORS["Teal"]}"
green = "${COLORS["Green"]}"
magenta = "${COLORS["Purple"]}"
red = "${COLORS["Pink"]}"
white = "${COLORS["White"]}"
yellow = "${COLORS["Yellow"]}"

[colors.bright]
black = "${COLORS["Gray C"]}"
blue = "${COLORS["Blue"]}"
cyan = "${COLORS["Teal"]}"
green = "${COLORS["Green"]}"
magenta = "${COLORS["Purple"]}"
red = "${COLORS["Pink"]}"
white = "${COLORS["White"]}"
yellow = "${COLORS["Yellow"]}"
EOF
tee "${HOME}/.config/alacritty/hints.toml" <<- EOF
[hints]
alphabet = "1234567890"

[[hints.enabled]]
regex = "(https?://)[a-zA-Z0-9#$%&()*+,./?@_~-]+"
post_processing = true
action = "Copy"

[hints.enabled.binding]
key = "U"
mods = "Control|Shift"
EOF

mkdir --parents "${HOME}/.config/pcmanfm/default/"
tee "${HOME}/.config/pcmanfm/default/pcmanfm.conf" <<- EOF
	[volume]
	autorun=0
	mount_on_startup=0
	mount_removable=0

	[ui]
	view_mode=compact
EOF
mkdir --parents "${HOME}/.config/libfm/"
tee "${HOME}/.config/libfm/libfm.conf" <<- EOF
	[config]
	terminal=alacritty

	[places]
	places_applications=0
	places_computer=0
	places_desktop=0
	places_home=1
	places_network=0
	places_root=1
	places_trash=1
	places_unmounted=1
EOF

chmod --recursive go= "${HOME}/"

if [[ "$(< /sys/devices/virtual/dmi/id/sys_vendor)" == "QEMU" ]]; then
  sudo pacman --noconfirm --sync --refresh spice-vdagent
  tee "${HOME}/.config/i3.d/21-spice" <<- EOF
		exec --no-startup-id spice-vdagent
	EOF
fi
