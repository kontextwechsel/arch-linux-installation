#!/bin/bash

if ! sudo true; then
  exit 1
fi

if [[ ! -d /sys/firmware/efi/efivars ]]; then
  printf "UEFI mode required\n"
  exit 1
fi

sudo pacman --noconfirm --sync --refresh efitools sbsigntools

readonly GUID="$(uuidgen --random)"
readonly MICROSOFT_GUID="77fa9abd-0359-4d32-bd60-28f4e78f784b"

function create_certificate() {
  local name="$1"
  local certificate="$2"
  local key="$3"

  openssl req -newkey rsa:4096 -nodes -keyout "${key}" -new -x509 -sha256 -days 3650 -subj "/CN=${name}" -out "${certificate}" 2> /dev/null
}

temporary_files=()
trap "{ rm \${temporary_files[@]}; }" EXIT

readonly platform_certificate="$(mktemp)" && temporary_files+=("${platform_certificate}")
readonly platform_key="$(mktemp)" && temporary_files+=("${platform_key}")
readonly platform_signature="$(mktemp)" && temporary_files+=("${platform_signature}")
readonly platform_signature_signed="$(mktemp)" && temporary_files+=("${platform_signature_signed}")
create_certificate "Arch Linux Platform Key" "${platform_certificate}" "${platform_key}"
cert-to-efi-sig-list -g "${GUID}" "${platform_certificate}" "${platform_signature}"
sign-efi-sig-list -g "${GUID}" -k "${platform_key}" -c "${platform_certificate}" PK "${platform_signature}" "${platform_signature_signed}"

if ! sudo efi-updatevar -f "${platform_signature_signed}" PK; then
  printf "Failed to update platform key\n"
  exit 1
fi

readonly kernel_certificate="$(mktemp)" && temporary_files+=("${kernel_certificate}")
readonly kernel_key="$(mktemp)" && temporary_files+=("${kernel_key}")
readonly kernel_signature="$(mktemp)" && temporary_files+=("${kernel_signature}")
create_certificate "Arch Linux Signature Key" "${kernel_certificate}" "${kernel_key}"
cert-to-efi-sig-list -g "${GUID}" "${kernel_certificate}" "${kernel_signature}"

signatures=("${kernel_signature}")

read -r -p "Add Microsoft Windows Production signature? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  readonly microsoft_production_certificate_binary="$(mktemp)" && temporary_files+=("${microsoft_production_certificate_binary}")
  readonly microsoft_production_certificate="$(mktemp)" && temporary_files+=("${microsoft_production_certificate}")
  readonly microsoft_production_signature="$(mktemp)" && temporary_files+=("${microsoft_production_signature}")
  if ! curl -f -L -s "https://go.microsoft.com/fwlink/p/?linkid=321192" > "${microsoft_production_certificate_binary}"; then
    printf "Failed to download Microsoft Windows Production certificate\n"
    exit 1
  fi
  openssl x509 -in "${microsoft_production_certificate_binary}" -inform DER -out "${microsoft_production_certificate}" -outform PEM
  cert-to-efi-sig-list -g "${MICROSOFT_GUID}" "${microsoft_production_certificate}" "${microsoft_production_signature}"
  signatures+=("${microsoft_production_signature}")
fi

read -r -p "Add Microsoft Microsoft UEFI signature? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  readonly microsoft_uefi_certificate_binary="$(mktemp)" && temporary_files+=("${microsoft_uefi_certificate_binary}")
  readonly microsoft_uefi_certificate="$(mktemp)" && temporary_files+=("${microsoft_uefi_certificate}")
  readonly micrososft_uefi_signature="$(mktemp)" && temporary_files+=("${micrososft_uefi_signature}")
  if ! curl -f -L -s https://go.microsoft.com/fwlink/p/?linkid=321194 > "${microsoft_uefi_certificate_binary}"; then
    printf "Failed to download Microsoft UEFI certificate\n"
    exit 1
  fi
  openssl x509 -in "${microsoft_uefi_certificate_binary}" -inform DER -out "${microsoft_uefi_certificate}" -outform PEM
  cert-to-efi-sig-list -g "${MICROSOFT_GUID}" "${microsoft_uefi_certificate}" "${micrososft_uefi_signature}"
  signatures+=("${micrososft_uefi_signature}")
fi

readonly all_signatures="$(mktemp)" && temporary_files+=("${all_signatures}")
readonly all_signatures_signed="$(mktemp)" && temporary_files+=("${all_signatures_signed}")
cat "${signatures[@]}" > "${all_signatures}"
sign-efi-sig-list -g "${GUID}" -k "${platform_key}" -c "${platform_certificate}" db "${all_signatures}" "${all_signatures_signed}"

if ! sudo efi-updatevar -f "${all_signatures_signed}" db; then
  printf "Failed to update signature database\n"
  exit 1
fi

readonly secure_boot_certificate="/etc/secure-boot/db.crt"
readonly secure_boot_key="/etc/secure-boot/db.key"
sudo mkdir --parents /etc/secure-boot/
sudo cp "${kernel_certificate}" "${secure_boot_certificate}"
sudo cp "${kernel_key}" "${secure_boot_key}"
sudo chmod u=r,go= "${secure_boot_certificate}" "${secure_boot_key}"

if sudo bootctl --quiet is-installed; then
  sudo bootctl remove
  if [[ -d /boot/loader/ ]]; then
    sudo rm -r /boot/loader/
  fi
  if [[ -f /etc/pacman.d/hooks/10-systemd-boot.hook ]]; then
    sudo rm /etc/pacman.d/hooks/10-systemd-boot.hook
  fi
fi

read -r -p "Use Arch Linux as default EFI? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  readonly unified_kernel_image="EFI/BOOT/BOOTX64.EFI"
  readonly selection_default_efi="yes"
else
  readonly unified_kernel_image="EFI/Linux/arch-linux.efi"
  readonly selection_default_efi="no"
fi
sudo mkdir --parents "/boot/${unified_kernel_image%/*}/"

sudo mkdir --parents /etc/kernel/
IFS=" " read -r -a parameters < /proc/cmdline
buffer=()
for parameter in "${parameters[@]}"; do
  if [[ "${parameter}" != initrd* ]]; then
    buffer+=("${parameter}")
  fi
done
sudo tee /etc/kernel/cmdline <<< "${buffer[*]}"

sudo tee /etc/initcpio/post/sign-unified-kernel-image <<- EOF
	#!/bin/bash

	readonly unified_kernel_image="\$3"
	if [[ -f "\${unified_kernel_image}" ]]; then
	  /usr/bin/sbsign --cert ${secure_boot_certificate} --key ${secure_boot_key} --output "\${unified_kernel_image}" "\${unified_kernel_image}"
	fi
EOF
sudo chmod +x /etc/initcpio/post/sign-unified-kernel-image

sudo tee /etc/mkinitcpio.d/linux.preset <<- EOF
	PRESETS=("default")

	default_config="/etc/mkinitcpio.conf"
	default_kver="/boot/vmlinuz-linux"
	default_microcode=($(ls --quote-name /boot/*-ucode.img))
	default_uki="/boot/${unified_kernel_image}"
EOF
sudo find /boot/ -name "initramfs-*.img" -delete
sudo mkinitcpio -p linux

read -r -p "Delete all UEFI entries? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  while IFS= read -r n; do
    sudo efibootmgr --quiet --bootnum "${n}" --delete-bootnum
  done < <(efibootmgr | awk 'BEGIN { IGNORECASE=1 } match($1, /^(boot)([0-9A-F]{4})([*])?$/, groups) { print groups[2] }')
fi

if [[ "${selection_default_efi}" == "no" ]]; then
  IFS=" " read -r disk part < <(lsblk -n -o MOUNTPOINT,PKNAME,PARTN | awk '$1 == "/boot" { printf "%s %s", $2, $3 }')
  sudo efibootmgr --disk "/dev/${disk}" --part "${part}" --create --label "Arch Linux" --loader "${unified_kernel_image}"
fi
