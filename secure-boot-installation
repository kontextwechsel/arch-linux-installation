#!/bin/bash

if ! sudo true; then
  exit 1
fi

if [[ ! -d /sys/firmware/efi/efivars/ ]]; then
  printf "UEFI mode required\n"
  exit 1
fi

sudo pacman --noconfirm --sync --refresh efitools sbsigntools

readonly GUID="$(uuidgen --random)"
readonly MICROSOFT_GUID="77fa9abd-0359-4d32-bd60-28f4e78f784b"

function create_certificate() {
  local name="$1"
  local certificate="$2"
  local key="$3"

  openssl req -newkey rsa:4096 -nodes -keyout "${key}" -new -x509 -sha256 -days 3650 -subj "/CN=${name}" -out "${certificate}" 2> /dev/null
}

temporary_files=()
trap "{ rm \${temporary_files[@]}; }" EXIT

readonly platform_certificate="$(mktemp)" && temporary_files+=("${platform_certificate}")
readonly platform_key="$(mktemp)" && temporary_files+=("${platform_key}")
readonly platform_signature="$(mktemp)" && temporary_files+=("${platform_signature}")
readonly platform_signature_signed="$(mktemp)" && temporary_files+=("${platform_signature_signed}")
create_certificate "Arch Linux Platform Key" "${platform_certificate}" "${platform_key}"
cert-to-efi-sig-list -g "${GUID}" "${platform_certificate}" "${platform_signature}"
sign-efi-sig-list -g "${GUID}" -k "${platform_key}" -c "${platform_certificate}" PK "${platform_signature}" "${platform_signature_signed}"

if ! sudo efi-updatevar -f "${platform_signature_signed}" PK; then
  printf "Failed to update platform key\n"
  exit 1
fi

readonly unified_kernel_image_certificate="$(mktemp)" && temporary_files+=("${unified_kernel_image_certificate}")
readonly unified_kernel_image_key="$(mktemp)" && temporary_files+=("${unified_kernel_image_key}")
readonly unified_kernel_image_signature="$(mktemp)" && temporary_files+=("${unified_kernel_image_signature}")
create_certificate "Arch Linux Signature Key" "${unified_kernel_image_certificate}" "${unified_kernel_image_key}"
cert-to-efi-sig-list -g "${GUID}" "${unified_kernel_image_certificate}" "${unified_kernel_image_signature}"

signatures=("${unified_kernel_image_signature}")

read -r -p "Add Microsoft Windows Production signature? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  readonly microsoft_production_certificate_binary="$(mktemp)" && temporary_files+=("${microsoft_production_certificate_binary}")
  readonly microsoft_production_certificate="$(mktemp)" && temporary_files+=("${microsoft_production_certificate}")
  readonly microsoft_production_signature="$(mktemp)" && temporary_files+=("${microsoft_production_signature}")
  if ! curl -f -L -s "https://go.microsoft.com/fwlink/p/?linkid=321192" > "${microsoft_production_certificate_binary}"; then
    printf "Failed to download Microsoft Windows Production certificate\n"
    exit 1
  fi
  openssl x509 -in "${microsoft_production_certificate_binary}" -inform DER -out "${microsoft_production_certificate}" -outform PEM
  cert-to-efi-sig-list -g "${MICROSOFT_GUID}" "${microsoft_production_certificate}" "${microsoft_production_signature}"
  signatures+=("${microsoft_production_signature}")
fi

read -r -p "Add Microsoft Microsoft UEFI signature? [Y/n] "
if [[ "${REPLY}" =~ ^[Yy]$ ]]; then
  readonly microsoft_uefi_certificate_binary="$(mktemp)" && temporary_files+=("${microsoft_uefi_certificate_binary}")
  readonly microsoft_uefi_certificate="$(mktemp)" && temporary_files+=("${microsoft_uefi_certificate}")
  readonly micrososft_uefi_signature="$(mktemp)" && temporary_files+=("${micrososft_uefi_signature}")
  if ! curl -f -L -s https://go.microsoft.com/fwlink/p/?linkid=321194 > "${microsoft_uefi_certificate_binary}"; then
    printf "Failed to download Microsoft UEFI certificate\n"
    exit 1
  fi
  openssl x509 -in "${microsoft_uefi_certificate_binary}" -inform DER -out "${microsoft_uefi_certificate}" -outform PEM
  cert-to-efi-sig-list -g "${MICROSOFT_GUID}" "${microsoft_uefi_certificate}" "${micrososft_uefi_signature}"
  signatures+=("${micrososft_uefi_signature}")
fi

readonly all_signatures="$(mktemp)" && temporary_files+=("${all_signatures}")
readonly all_signatures_signed="$(mktemp)" && temporary_files+=("${all_signatures_signed}")
cat "${signatures[@]}" > "${all_signatures}"
sign-efi-sig-list -g "${GUID}" -k "${platform_key}" -c "${platform_certificate}" db "${all_signatures}" "${all_signatures_signed}"

if ! sudo efi-updatevar -f "${all_signatures_signed}" db; then
  printf "Failed to update signature database\n"
  exit 1
fi

readonly secure_boot_certificate="/etc/secure-boot/db.pem"
readonly secure_boot_key="/etc/secure-boot/db.key"
sudo mkdir --parents /etc/secure-boot/
sudo cp "${unified_kernel_image_certificate}" "${secure_boot_certificate}"
sudo cp "${unified_kernel_image_key}" "${secure_boot_key}"
sudo chmod u=r,go= "${secure_boot_certificate}" "${secure_boot_key}"

sudo tee /etc/initcpio/post/sign-unified-kernel-image <<- EOF
	#!/bin/bash

	readonly unified_kernel_image="\$3"
	if [[ -f "\${unified_kernel_image}" ]]; then
	  /usr/bin/sbsign --cert ${secure_boot_certificate} --key ${secure_boot_key} --output "\${unified_kernel_image}" "\${unified_kernel_image}"
	fi
EOF
sudo chmod +x /etc/initcpio/post/sign-unified-kernel-image

sudo mkinitcpio -p linux
